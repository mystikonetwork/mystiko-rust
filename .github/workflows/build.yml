name: Build

on:
  push:
    branches: ['master']
  pull_request:
    branches: ['*']

jobs:
  build:
    runs-on: [self-hosted, linux, X64]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PACKAGES_TOKEN }}
          lfs: true
          submodules: recursive
          persist-credentials: false

      - name: Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy, llvm-tools-preview

      - name: Setup MySql
        uses: mirromutth/mysql-action@v1
        with:
          mysql version: '8.0'
          mysql database: 'mystiko_rust_tests'
          mysql root password: ${{ secrets.MYSQL_ROOT_PASSWORD }}

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Setup Buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cargo Install
        run: cargo install cargo-llvm-cov protoc-gen-prost-crate --force

      - name: Build
        run: RUSTFLAGS="-D warnings" ./scripts/build.sh

      - name: Check Format
        run: cargo fmt --all -- --check

      - name: Run Clippy
        timeout-minutes: 60
        run: cargo clippy --all-targets -j 4 -- -D warnings

      - name: Run Test
        run: cargo llvm-cov --ignore-filename-regex="mystiko_(abi|relayer_abi|protos)" --lcov --no-report
        env:
          DATABASE_URL: mysql://root:${{ secrets.MYSQL_ROOT_PASSWORD }}@127.0.0.1:3306/mystiko_rust_tests

      - name: Generate Coverage
        run: cargo llvm-cov --ignore-filename-regex="mystiko_(abi|relayer_abi|protos)" --lcov --no-run --output-path lcov.info

      - name: Upload Coverage
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

      - name: Check Dirty Files
        run: git diff --quiet || (echo "some generated files are not included in repo" && exit 1)

      - name: Telegram Failure Notification
        uses: appleboy/telegram-action@master
        if: failure()
        with:
          message: ‚ùó Build failed for [${{ github.repository }}](https://github.com/${{ github.repository }}/actions) because of ${{ github.actor }}
          format: markdown
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Telegram Success Notification
        uses: appleboy/telegram-action@master
        if: success()
        with:
          message: Build succeeded for [${{ github.repository }}](https://github.com/${{ github.repository }}/actions)
          format: markdown
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
