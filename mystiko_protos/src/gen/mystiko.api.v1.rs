// @generated
#[derive(typed_builder::TypedBuilder)]
#[builder(field_defaults(default, setter(into)))]
#[derive(mystiko_protos_macros::ProtoBuilder)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponse {
    #[prost(enumeration="StatusCode", tag="1")]
    pub code: i32,
    #[prost(oneof="api_response::Result", tags="2, 3")]
    pub result: ::core::option::Option<api_response::Result>,
}
/// Nested message and enum types in `ApiResponse`.
pub mod api_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Result {
        #[prost(bytes, tag="2")]
        Data(::prost::alloc::vec::Vec<u8>),
        #[prost(string, tag="3")]
        ErrorMessage(::prost::alloc::string::String),
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum StatusCode {
    Unspecified = 0,
    Success = 1,
    UnknownError = 2,
    ConfigError = 3,
    DatabaseMigrationError = 4,
    CryptoError = 5,
    MnemonicError = 6,
    HexStringError = 7,
    StorageError = 8,
    InvalidPasswordError = 9,
    MismatchedPasswordError = 10,
    NoExistingWalletError = 11,
    NoSuchAccountError = 12,
    InvalidProviderUrlError = 13,
    DataLoaderError = 14,
}
impl StatusCode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            StatusCode::Unspecified => "STATUS_CODE_UNSPECIFIED",
            StatusCode::Success => "STATUS_CODE_SUCCESS",
            StatusCode::UnknownError => "STATUS_CODE_UNKNOWN_ERROR",
            StatusCode::ConfigError => "STATUS_CODE_CONFIG_ERROR",
            StatusCode::DatabaseMigrationError => "STATUS_CODE_DATABASE_MIGRATION_ERROR",
            StatusCode::CryptoError => "STATUS_CODE_CRYPTO_ERROR",
            StatusCode::MnemonicError => "STATUS_CODE_MNEMONIC_ERROR",
            StatusCode::HexStringError => "STATUS_CODE_HEX_STRING_ERROR",
            StatusCode::StorageError => "STATUS_CODE_STORAGE_ERROR",
            StatusCode::InvalidPasswordError => "STATUS_CODE_INVALID_PASSWORD_ERROR",
            StatusCode::MismatchedPasswordError => "STATUS_CODE_MISMATCHED_PASSWORD_ERROR",
            StatusCode::NoExistingWalletError => "STATUS_CODE_NO_EXISTING_WALLET_ERROR",
            StatusCode::NoSuchAccountError => "STATUS_CODE_NO_SUCH_ACCOUNT_ERROR",
            StatusCode::InvalidProviderUrlError => "STATUS_CODE_INVALID_PROVIDER_URL_ERROR",
            StatusCode::DataLoaderError => "STATUS_CODE_DATA_LOADER_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STATUS_CODE_UNSPECIFIED" => Some(Self::Unspecified),
            "STATUS_CODE_SUCCESS" => Some(Self::Success),
            "STATUS_CODE_UNKNOWN_ERROR" => Some(Self::UnknownError),
            "STATUS_CODE_CONFIG_ERROR" => Some(Self::ConfigError),
            "STATUS_CODE_DATABASE_MIGRATION_ERROR" => Some(Self::DatabaseMigrationError),
            "STATUS_CODE_CRYPTO_ERROR" => Some(Self::CryptoError),
            "STATUS_CODE_MNEMONIC_ERROR" => Some(Self::MnemonicError),
            "STATUS_CODE_HEX_STRING_ERROR" => Some(Self::HexStringError),
            "STATUS_CODE_STORAGE_ERROR" => Some(Self::StorageError),
            "STATUS_CODE_INVALID_PASSWORD_ERROR" => Some(Self::InvalidPasswordError),
            "STATUS_CODE_MISMATCHED_PASSWORD_ERROR" => Some(Self::MismatchedPasswordError),
            "STATUS_CODE_NO_EXISTING_WALLET_ERROR" => Some(Self::NoExistingWalletError),
            "STATUS_CODE_NO_SUCH_ACCOUNT_ERROR" => Some(Self::NoSuchAccountError),
            "STATUS_CODE_INVALID_PROVIDER_URL_ERROR" => Some(Self::InvalidProviderUrlError),
            "STATUS_CODE_DATA_LOADER_ERROR" => Some(Self::DataLoaderError),
            _ => None,
        }
    }
}
/// Encoded file descriptor set for the `mystiko.api.v1` package
pub const FILE_DESCRIPTOR_SET: &[u8] = &[
    0x0a, 0xd2, 0x0d, 0x0a, 0x1d, 0x6d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x2f, 0x61, 0x70, 0x69,
    0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
    0x74, 0x6f, 0x12, 0x0e, 0x6d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
    0x76, 0x31, 0x22, 0x84, 0x01, 0x0a, 0x0b, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
    0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
    0x32, 0x1a, 0x2e, 0x6d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
    0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
    0x64, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
    0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
    0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
    0x00, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
    0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a, 0x9b, 0x04, 0x0a, 0x0a, 0x53, 0x74,
    0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54,
    0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
    0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
    0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1d,
    0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
    0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x1c, 0x0a,
    0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
    0x46, 0x49, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x53,
    0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42,
    0x41, 0x53, 0x45, 0x5f, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52,
    0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
    0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f,
    0x52, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
    0x44, 0x45, 0x5f, 0x4d, 0x4e, 0x45, 0x4d, 0x4f, 0x4e, 0x49, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f,
    0x52, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
    0x44, 0x45, 0x5f, 0x48, 0x45, 0x58, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52,
    0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
    0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52,
    0x4f, 0x52, 0x10, 0x08, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
    0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x53, 0x53,
    0x57, 0x4f, 0x52, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x29, 0x0a, 0x25,
    0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d,
    0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f,
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x54, 0x41, 0x54, 0x55,
    0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x49,
    0x4e, 0x47, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
    0x0b, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45,
    0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
    0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0c, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x54, 0x41, 0x54,
    0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
    0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x45, 0x52, 0x52,
    0x4f, 0x52, 0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
    0x4f, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x52, 0x5f,
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0e, 0x42, 0x7d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
    0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x52,
    0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0xa2, 0x02,
    0x03, 0x4d, 0x41, 0x58, 0xaa, 0x02, 0x0e, 0x4d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x41,
    0x70, 0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x4d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x5c,
    0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a, 0x4d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f,
    0x5c, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
    0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x4d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x3a, 0x3a, 0x41,
    0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x4a, 0xf4, 0x06, 0x0a, 0x06, 0x12, 0x04, 0x00, 0x00, 0x1c,
    0x01, 0x0a, 0x08, 0x0a, 0x01, 0x0c, 0x12, 0x03, 0x00, 0x00, 0x12, 0x0a, 0x08, 0x0a, 0x01, 0x02,
    0x12, 0x03, 0x02, 0x00, 0x17, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x04, 0x00, 0x0a,
    0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x04, 0x08, 0x13, 0x0a, 0x0b, 0x0a,
    0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x05, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x00, 0x06, 0x12, 0x03, 0x05, 0x02, 0x0c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00,
    0x01, 0x12, 0x03, 0x05, 0x0f, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12,
    0x03, 0x05, 0x1b, 0x1c, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x00, 0x08, 0x00, 0x12, 0x04, 0x06, 0x02,
    0x09, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x08, 0x00, 0x01, 0x12, 0x03, 0x06, 0x08, 0x0e,
    0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x07, 0x04, 0x1d, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x01, 0x05, 0x12, 0x03, 0x07, 0x04, 0x09, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x07, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x01, 0x03, 0x12, 0x03, 0x07, 0x1b, 0x1c, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x02, 0x12,
    0x03, 0x08, 0x04, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x05, 0x12, 0x03, 0x08,
    0x04, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x08, 0x0b, 0x18,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x08, 0x1b, 0x1c, 0x0a, 0x0a,
    0x0a, 0x02, 0x05, 0x00, 0x12, 0x04, 0x0c, 0x00, 0x1c, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x00,
    0x01, 0x12, 0x03, 0x0c, 0x05, 0x0f, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x00, 0x12, 0x03,
    0x0d, 0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x0d, 0x02,
    0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x0d, 0x2b, 0x2c, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x01, 0x12, 0x03, 0x0e, 0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x0e, 0x02, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00,
    0x02, 0x01, 0x02, 0x12, 0x03, 0x0e, 0x2b, 0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x02,
    0x12, 0x03, 0x0f, 0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03,
    0x0f, 0x02, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03, 0x0f, 0x2b,
    0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x03, 0x12, 0x03, 0x10, 0x02, 0x2d, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x10, 0x02, 0x1a, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x00, 0x02, 0x03, 0x02, 0x12, 0x03, 0x10, 0x2b, 0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00,
    0x02, 0x04, 0x12, 0x03, 0x11, 0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x04, 0x01,
    0x12, 0x03, 0x11, 0x02, 0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x04, 0x02, 0x12, 0x03,
    0x11, 0x2b, 0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x05, 0x12, 0x03, 0x12, 0x02, 0x2d,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x12, 0x02, 0x1a, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x00, 0x02, 0x05, 0x02, 0x12, 0x03, 0x12, 0x2b, 0x2c, 0x0a, 0x0b, 0x0a, 0x04,
    0x05, 0x00, 0x02, 0x06, 0x12, 0x03, 0x13, 0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02,
    0x06, 0x01, 0x12, 0x03, 0x13, 0x02, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x06, 0x02,
    0x12, 0x03, 0x13, 0x2b, 0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x07, 0x12, 0x03, 0x14,
    0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x07, 0x01, 0x12, 0x03, 0x14, 0x02, 0x1e,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x07, 0x02, 0x12, 0x03, 0x14, 0x2b, 0x2c, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x00, 0x02, 0x08, 0x12, 0x03, 0x15, 0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x00, 0x02, 0x08, 0x01, 0x12, 0x03, 0x15, 0x02, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02,
    0x08, 0x02, 0x12, 0x03, 0x15, 0x2b, 0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x09, 0x12,
    0x03, 0x16, 0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x09, 0x01, 0x12, 0x03, 0x16,
    0x02, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x09, 0x02, 0x12, 0x03, 0x16, 0x2b, 0x2c,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x0a, 0x12, 0x03, 0x17, 0x02, 0x2e, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x00, 0x02, 0x0a, 0x01, 0x12, 0x03, 0x17, 0x02, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x00, 0x02, 0x0a, 0x02, 0x12, 0x03, 0x17, 0x2b, 0x2d, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02,
    0x0b, 0x12, 0x03, 0x18, 0x02, 0x2e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0b, 0x01, 0x12,
    0x03, 0x18, 0x02, 0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0b, 0x02, 0x12, 0x03, 0x18,
    0x2b, 0x2d, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x0c, 0x12, 0x03, 0x19, 0x02, 0x2e, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0c, 0x01, 0x12, 0x03, 0x19, 0x02, 0x23, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x00, 0x02, 0x0c, 0x02, 0x12, 0x03, 0x19, 0x2b, 0x2d, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x00, 0x02, 0x0d, 0x12, 0x03, 0x1a, 0x02, 0x2e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0d,
    0x01, 0x12, 0x03, 0x1a, 0x02, 0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0d, 0x02, 0x12,
    0x03, 0x1a, 0x2b, 0x2d, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x0e, 0x12, 0x03, 0x1b, 0x02,
    0x2e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0e, 0x01, 0x12, 0x03, 0x1b, 0x02, 0x1f, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x0e, 0x02, 0x12, 0x03, 0x1b, 0x2b, 0x2d, 0x62, 0x06, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x33,
];
include!("mystiko.api.v1.serde.rs");
// @@protoc_insertion_point(module)