// @generated
#[derive(typed_builder::TypedBuilder)]
#[builder(field_defaults(default, setter(into)))]
#[derive(mystiko_protos_macros::ProtoBuilder)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponse {
    #[prost(message, optional, tag="1")]
    pub code: ::core::option::Option<StatusCode>,
    #[prost(oneof="api_response::Result", tags="2, 3")]
    pub result: ::core::option::Option<api_response::Result>,
}
/// Nested message and enum types in `ApiResponse`.
pub mod api_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Result {
        #[prost(bytes, tag="2")]
        Data(::prost::alloc::vec::Vec<u8>),
        #[prost(string, tag="3")]
        ErrorMessage(::prost::alloc::string::String),
    }
}
#[derive(typed_builder::TypedBuilder)]
#[builder(field_defaults(default, setter(into)))]
#[derive(mystiko_protos_macros::ProtoBuilder)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatusCode {
    #[prost(bool, tag="1")]
    pub success: bool,
    #[prost(oneof="status_code::Error", tags="2, 3, 4, 5, 6, 7, 8")]
    pub error: ::core::option::Option<status_code::Error>,
}
/// Nested message and enum types in `StatusCode`.
pub mod status_code {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Error {
        #[prost(enumeration="super::MystikoLibError", tag="2")]
        Lib(i32),
        #[prost(enumeration="super::MystikoError", tag="3")]
        Mystiko(i32),
        #[prost(enumeration="super::WalletError", tag="4")]
        Wallet(i32),
        #[prost(enumeration="super::AccountError", tag="5")]
        Account(i32),
        #[prost(enumeration="super::DepositError", tag="6")]
        Deposit(i32),
        #[prost(enumeration="super::ScannerError", tag="7")]
        Scanner(i32),
        #[prost(enumeration="super::SynchronizeError", tag="8")]
        Synchronize(i32),
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MystikoLibError {
    Unspecified = 0,
    GetMystikoGuardError = 1,
    DeserializeMessageError = 2,
    StorageError = 3,
}
impl MystikoLibError {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MystikoLibError::Unspecified => "MYSTIKO_LIB_ERROR_UNSPECIFIED",
            MystikoLibError::GetMystikoGuardError => "MYSTIKO_LIB_ERROR_GET_MYSTIKO_GUARD_ERROR",
            MystikoLibError::DeserializeMessageError => "MYSTIKO_LIB_ERROR_DESERIALIZE_MESSAGE_ERROR",
            MystikoLibError::StorageError => "MYSTIKO_LIB_ERROR_STORAGE_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MYSTIKO_LIB_ERROR_UNSPECIFIED" => Some(Self::Unspecified),
            "MYSTIKO_LIB_ERROR_GET_MYSTIKO_GUARD_ERROR" => Some(Self::GetMystikoGuardError),
            "MYSTIKO_LIB_ERROR_DESERIALIZE_MESSAGE_ERROR" => Some(Self::DeserializeMessageError),
            "MYSTIKO_LIB_ERROR_STORAGE_ERROR" => Some(Self::StorageError),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MystikoError {
    Unspecified = 0,
    SynchronizerError = 1,
    ScannerError = 2,
    DataloaderError = 3,
    ConfigError = 4,
    DatabaseMigrationError = 5,
    InvalidProviderUrlError = 6,
}
impl MystikoError {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MystikoError::Unspecified => "MYSTIKO_ERROR_UNSPECIFIED",
            MystikoError::SynchronizerError => "MYSTIKO_ERROR_SYNCHRONIZER_ERROR",
            MystikoError::ScannerError => "MYSTIKO_ERROR_SCANNER_ERROR",
            MystikoError::DataloaderError => "MYSTIKO_ERROR_DATALOADER_ERROR",
            MystikoError::ConfigError => "MYSTIKO_ERROR_CONFIG_ERROR",
            MystikoError::DatabaseMigrationError => "MYSTIKO_ERROR_DATABASE_MIGRATION_ERROR",
            MystikoError::InvalidProviderUrlError => "MYSTIKO_ERROR_INVALID_PROVIDER_URL_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MYSTIKO_ERROR_UNSPECIFIED" => Some(Self::Unspecified),
            "MYSTIKO_ERROR_SYNCHRONIZER_ERROR" => Some(Self::SynchronizerError),
            "MYSTIKO_ERROR_SCANNER_ERROR" => Some(Self::ScannerError),
            "MYSTIKO_ERROR_DATALOADER_ERROR" => Some(Self::DataloaderError),
            "MYSTIKO_ERROR_CONFIG_ERROR" => Some(Self::ConfigError),
            "MYSTIKO_ERROR_DATABASE_MIGRATION_ERROR" => Some(Self::DatabaseMigrationError),
            "MYSTIKO_ERROR_INVALID_PROVIDER_URL_ERROR" => Some(Self::InvalidProviderUrlError),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AccountError {
    Unspecified = 0,
    StorageError = 1,
    CryptoError = 2,
    MnemonicError = 3,
    HexStringError = 4,
    NoSuchAccountError = 5,
    WalletsError = 6,
}
impl AccountError {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AccountError::Unspecified => "ACCOUNT_ERROR_UNSPECIFIED",
            AccountError::StorageError => "ACCOUNT_ERROR_STORAGE_ERROR",
            AccountError::CryptoError => "ACCOUNT_ERROR_CRYPTO_ERROR",
            AccountError::MnemonicError => "ACCOUNT_ERROR_MNEMONIC_ERROR",
            AccountError::HexStringError => "ACCOUNT_ERROR_HEX_STRING_ERROR",
            AccountError::NoSuchAccountError => "ACCOUNT_ERROR_NO_SUCH_ACCOUNT_ERROR",
            AccountError::WalletsError => "ACCOUNT_ERROR_WALLETS_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ACCOUNT_ERROR_UNSPECIFIED" => Some(Self::Unspecified),
            "ACCOUNT_ERROR_STORAGE_ERROR" => Some(Self::StorageError),
            "ACCOUNT_ERROR_CRYPTO_ERROR" => Some(Self::CryptoError),
            "ACCOUNT_ERROR_MNEMONIC_ERROR" => Some(Self::MnemonicError),
            "ACCOUNT_ERROR_HEX_STRING_ERROR" => Some(Self::HexStringError),
            "ACCOUNT_ERROR_NO_SUCH_ACCOUNT_ERROR" => Some(Self::NoSuchAccountError),
            "ACCOUNT_ERROR_WALLETS_ERROR" => Some(Self::WalletsError),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum WalletError {
    Unspecified = 0,
    StorageError = 1,
    CryptoError = 2,
    HexStringError = 3,
    MnemonicError = 4,
    InvalidPasswordError = 5,
    MismatchedPasswordError = 6,
    NoExistingWalletError = 7,
}
impl WalletError {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            WalletError::Unspecified => "WALLET_ERROR_UNSPECIFIED",
            WalletError::StorageError => "WALLET_ERROR_STORAGE_ERROR",
            WalletError::CryptoError => "WALLET_ERROR_CRYPTO_ERROR",
            WalletError::HexStringError => "WALLET_ERROR_HEX_STRING_ERROR",
            WalletError::MnemonicError => "WALLET_ERROR_MNEMONIC_ERROR",
            WalletError::InvalidPasswordError => "WALLET_ERROR_INVALID_PASSWORD_ERROR",
            WalletError::MismatchedPasswordError => "WALLET_ERROR_MISMATCHED_PASSWORD_ERROR",
            WalletError::NoExistingWalletError => "WALLET_ERROR_NO_EXISTING_WALLET_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WALLET_ERROR_UNSPECIFIED" => Some(Self::Unspecified),
            "WALLET_ERROR_STORAGE_ERROR" => Some(Self::StorageError),
            "WALLET_ERROR_CRYPTO_ERROR" => Some(Self::CryptoError),
            "WALLET_ERROR_HEX_STRING_ERROR" => Some(Self::HexStringError),
            "WALLET_ERROR_MNEMONIC_ERROR" => Some(Self::MnemonicError),
            "WALLET_ERROR_INVALID_PASSWORD_ERROR" => Some(Self::InvalidPasswordError),
            "WALLET_ERROR_MISMATCHED_PASSWORD_ERROR" => Some(Self::MismatchedPasswordError),
            "WALLET_ERROR_NO_EXISTING_WALLET_ERROR" => Some(Self::NoExistingWalletError),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DepositError {
    Unspecified = 0,
    HexStringError = 1,
    FromDecStrError = 2,
    ParseBytesError = 3,
    ProviderError = 4,
    AnyhowError = 5,
    PublicAssetsError = 6,
    DepositContractsError = 7,
    CommitmentPoolContractsError = 8,
    TransactionsError = 9,
    ProtocolError = 10,
    StorageError = 11,
    ParseBigIntError = 12,
    UnsupportedChainIdError = 13,
    NoDepositContractFoundError = 14,
    InvalidDepositAmountError = 15,
    InvalidRollupFeeAmountError = 16,
    InvalidBridgeFeeAmountError = 17,
    InvalidExecutorFeeAmountError = 18,
    InsufficientBalanceError = 19,
    IdNotFoundError = 20,
    MissingPrivateKeyError = 21,
    DepositStatusError = 22,
    DuplicateCommitmentError = 23,
    WalletsError = 24,
    AccountsError = 25,
}
impl DepositError {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            DepositError::Unspecified => "DEPOSIT_ERROR_UNSPECIFIED",
            DepositError::HexStringError => "DEPOSIT_ERROR_HEX_STRING_ERROR",
            DepositError::FromDecStrError => "DEPOSIT_ERROR_FROM_DEC_STR_ERROR",
            DepositError::ParseBytesError => "DEPOSIT_ERROR_PARSE_BYTES_ERROR",
            DepositError::ProviderError => "DEPOSIT_ERROR_PROVIDER_ERROR",
            DepositError::AnyhowError => "DEPOSIT_ERROR_ANYHOW_ERROR",
            DepositError::PublicAssetsError => "DEPOSIT_ERROR_PUBLIC_ASSETS_ERROR",
            DepositError::DepositContractsError => "DEPOSIT_ERROR_DEPOSIT_CONTRACTS_ERROR",
            DepositError::CommitmentPoolContractsError => "DEPOSIT_ERROR_COMMITMENT_POOL_CONTRACTS_ERROR",
            DepositError::TransactionsError => "DEPOSIT_ERROR_TRANSACTIONS_ERROR",
            DepositError::ProtocolError => "DEPOSIT_ERROR_PROTOCOL_ERROR",
            DepositError::StorageError => "DEPOSIT_ERROR_STORAGE_ERROR",
            DepositError::ParseBigIntError => "DEPOSIT_ERROR_PARSE_BIG_INT_ERROR",
            DepositError::UnsupportedChainIdError => "DEPOSIT_ERROR_UNSUPPORTED_CHAIN_ID_ERROR",
            DepositError::NoDepositContractFoundError => "DEPOSIT_ERROR_NO_DEPOSIT_CONTRACT_FOUND_ERROR",
            DepositError::InvalidDepositAmountError => "DEPOSIT_ERROR_INVALID_DEPOSIT_AMOUNT_ERROR",
            DepositError::InvalidRollupFeeAmountError => "DEPOSIT_ERROR_INVALID_ROLLUP_FEE_AMOUNT_ERROR",
            DepositError::InvalidBridgeFeeAmountError => "DEPOSIT_ERROR_INVALID_BRIDGE_FEE_AMOUNT_ERROR",
            DepositError::InvalidExecutorFeeAmountError => "DEPOSIT_ERROR_INVALID_EXECUTOR_FEE_AMOUNT_ERROR",
            DepositError::InsufficientBalanceError => "DEPOSIT_ERROR_INSUFFICIENT_BALANCE_ERROR",
            DepositError::IdNotFoundError => "DEPOSIT_ERROR_ID_NOT_FOUND_ERROR",
            DepositError::MissingPrivateKeyError => "DEPOSIT_ERROR_MISSING_PRIVATE_KEY_ERROR",
            DepositError::DepositStatusError => "DEPOSIT_ERROR_DEPOSIT_STATUS_ERROR",
            DepositError::DuplicateCommitmentError => "DEPOSIT_ERROR_DUPLICATE_COMMITMENT_ERROR",
            DepositError::WalletsError => "DEPOSIT_ERROR_WALLETS_ERROR",
            DepositError::AccountsError => "DEPOSIT_ERROR_ACCOUNTS_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DEPOSIT_ERROR_UNSPECIFIED" => Some(Self::Unspecified),
            "DEPOSIT_ERROR_HEX_STRING_ERROR" => Some(Self::HexStringError),
            "DEPOSIT_ERROR_FROM_DEC_STR_ERROR" => Some(Self::FromDecStrError),
            "DEPOSIT_ERROR_PARSE_BYTES_ERROR" => Some(Self::ParseBytesError),
            "DEPOSIT_ERROR_PROVIDER_ERROR" => Some(Self::ProviderError),
            "DEPOSIT_ERROR_ANYHOW_ERROR" => Some(Self::AnyhowError),
            "DEPOSIT_ERROR_PUBLIC_ASSETS_ERROR" => Some(Self::PublicAssetsError),
            "DEPOSIT_ERROR_DEPOSIT_CONTRACTS_ERROR" => Some(Self::DepositContractsError),
            "DEPOSIT_ERROR_COMMITMENT_POOL_CONTRACTS_ERROR" => Some(Self::CommitmentPoolContractsError),
            "DEPOSIT_ERROR_TRANSACTIONS_ERROR" => Some(Self::TransactionsError),
            "DEPOSIT_ERROR_PROTOCOL_ERROR" => Some(Self::ProtocolError),
            "DEPOSIT_ERROR_STORAGE_ERROR" => Some(Self::StorageError),
            "DEPOSIT_ERROR_PARSE_BIG_INT_ERROR" => Some(Self::ParseBigIntError),
            "DEPOSIT_ERROR_UNSUPPORTED_CHAIN_ID_ERROR" => Some(Self::UnsupportedChainIdError),
            "DEPOSIT_ERROR_NO_DEPOSIT_CONTRACT_FOUND_ERROR" => Some(Self::NoDepositContractFoundError),
            "DEPOSIT_ERROR_INVALID_DEPOSIT_AMOUNT_ERROR" => Some(Self::InvalidDepositAmountError),
            "DEPOSIT_ERROR_INVALID_ROLLUP_FEE_AMOUNT_ERROR" => Some(Self::InvalidRollupFeeAmountError),
            "DEPOSIT_ERROR_INVALID_BRIDGE_FEE_AMOUNT_ERROR" => Some(Self::InvalidBridgeFeeAmountError),
            "DEPOSIT_ERROR_INVALID_EXECUTOR_FEE_AMOUNT_ERROR" => Some(Self::InvalidExecutorFeeAmountError),
            "DEPOSIT_ERROR_INSUFFICIENT_BALANCE_ERROR" => Some(Self::InsufficientBalanceError),
            "DEPOSIT_ERROR_ID_NOT_FOUND_ERROR" => Some(Self::IdNotFoundError),
            "DEPOSIT_ERROR_MISSING_PRIVATE_KEY_ERROR" => Some(Self::MissingPrivateKeyError),
            "DEPOSIT_ERROR_DEPOSIT_STATUS_ERROR" => Some(Self::DepositStatusError),
            "DEPOSIT_ERROR_DUPLICATE_COMMITMENT_ERROR" => Some(Self::DuplicateCommitmentError),
            "DEPOSIT_ERROR_WALLETS_ERROR" => Some(Self::WalletsError),
            "DEPOSIT_ERROR_ACCOUNTS_ERROR" => Some(Self::AccountsError),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ScannerError {
    Unspecified = 0,
    NoSuchAccountError = 1,
    NoSuchContractConfigError = 2,
    CommitmentEmptyError = 3,
    CryptoError = 4,
    StorageError = 5,
    JoinError = 6,
    ProtocolError = 7,
    FromHexError = 8,
    AnyhowError = 9,
    AccountHandlerError = 10,
    WalletHandlerError = 11,
}
impl ScannerError {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ScannerError::Unspecified => "SCANNER_ERROR_UNSPECIFIED",
            ScannerError::NoSuchAccountError => "SCANNER_ERROR_NO_SUCH_ACCOUNT_ERROR",
            ScannerError::NoSuchContractConfigError => "SCANNER_ERROR_NO_SUCH_CONTRACT_CONFIG_ERROR",
            ScannerError::CommitmentEmptyError => "SCANNER_ERROR_COMMITMENT_EMPTY_ERROR",
            ScannerError::CryptoError => "SCANNER_ERROR_CRYPTO_ERROR",
            ScannerError::StorageError => "SCANNER_ERROR_STORAGE_ERROR",
            ScannerError::JoinError => "SCANNER_ERROR_JOIN_ERROR",
            ScannerError::ProtocolError => "SCANNER_ERROR_PROTOCOL_ERROR",
            ScannerError::FromHexError => "SCANNER_ERROR_FROM_HEX_ERROR",
            ScannerError::AnyhowError => "SCANNER_ERROR_ANYHOW_ERROR",
            ScannerError::AccountHandlerError => "SCANNER_ERROR_ACCOUNT_HANDLER_ERROR",
            ScannerError::WalletHandlerError => "SCANNER_ERROR_WALLET_HANDLER_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SCANNER_ERROR_UNSPECIFIED" => Some(Self::Unspecified),
            "SCANNER_ERROR_NO_SUCH_ACCOUNT_ERROR" => Some(Self::NoSuchAccountError),
            "SCANNER_ERROR_NO_SUCH_CONTRACT_CONFIG_ERROR" => Some(Self::NoSuchContractConfigError),
            "SCANNER_ERROR_COMMITMENT_EMPTY_ERROR" => Some(Self::CommitmentEmptyError),
            "SCANNER_ERROR_CRYPTO_ERROR" => Some(Self::CryptoError),
            "SCANNER_ERROR_STORAGE_ERROR" => Some(Self::StorageError),
            "SCANNER_ERROR_JOIN_ERROR" => Some(Self::JoinError),
            "SCANNER_ERROR_PROTOCOL_ERROR" => Some(Self::ProtocolError),
            "SCANNER_ERROR_FROM_HEX_ERROR" => Some(Self::FromHexError),
            "SCANNER_ERROR_ANYHOW_ERROR" => Some(Self::AnyhowError),
            "SCANNER_ERROR_ACCOUNT_HANDLER_ERROR" => Some(Self::AccountHandlerError),
            "SCANNER_ERROR_WALLET_HANDLER_ERROR" => Some(Self::WalletHandlerError),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SynchronizeError {
    Unspecified = 0,
    UnsupportedChainError = 1,
    DataloaderError = 2,
    DataloaderConfigError = 3,
    AnyhowError = 4,
}
impl SynchronizeError {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            SynchronizeError::Unspecified => "SYNCHRONIZE_ERROR_UNSPECIFIED",
            SynchronizeError::UnsupportedChainError => "SYNCHRONIZE_ERROR_UNSUPPORTED_CHAIN_ERROR",
            SynchronizeError::DataloaderError => "SYNCHRONIZE_ERROR_DATALOADER_ERROR",
            SynchronizeError::DataloaderConfigError => "SYNCHRONIZE_ERROR_DATALOADER_CONFIG_ERROR",
            SynchronizeError::AnyhowError => "SYNCHRONIZE_ERROR_ANYHOW_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SYNCHRONIZE_ERROR_UNSPECIFIED" => Some(Self::Unspecified),
            "SYNCHRONIZE_ERROR_UNSUPPORTED_CHAIN_ERROR" => Some(Self::UnsupportedChainError),
            "SYNCHRONIZE_ERROR_DATALOADER_ERROR" => Some(Self::DataloaderError),
            "SYNCHRONIZE_ERROR_DATALOADER_CONFIG_ERROR" => Some(Self::DataloaderConfigError),
            "SYNCHRONIZE_ERROR_ANYHOW_ERROR" => Some(Self::AnyhowError),
            _ => None,
        }
    }
}
/// Encoded file descriptor set for the `mystiko.api.v1` package
pub const FILE_DESCRIPTOR_SET: &[u8] = &[
    0x0a, 0x8b, 0x39, 0x0a, 0x1d, 0x6d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x2f, 0x61, 0x70, 0x69,
    0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
    0x74, 0x6f, 0x12, 0x0e, 0x6d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
    0x76, 0x31, 0x22, 0x84, 0x01, 0x0a, 0x0b, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
    0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
    0x32, 0x1a, 0x2e, 0x6d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
    0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
    0x64, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
    0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
    0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
    0x00, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
    0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc9, 0x03, 0x0a, 0x0a, 0x53, 0x74,
    0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
    0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
    0x73, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x6c, 0x69, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
    0x1f, 0x2e, 0x6d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
    0x2e, 0x4d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x4c, 0x69, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72,
    0x48, 0x00, 0x52, 0x03, 0x6c, 0x69, 0x62, 0x12, 0x38, 0x0a, 0x07, 0x6d, 0x79, 0x73, 0x74, 0x69,
    0x6b, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x79, 0x73, 0x74, 0x69,
    0x6b, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x73, 0x74, 0x69, 0x6b,
    0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x79, 0x73, 0x74, 0x69, 0x6b,
    0x6f, 0x12, 0x35, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
    0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
    0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
    0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
    0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x79, 0x73, 0x74,
    0x69, 0x6b, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
    0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
    0x6e, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x06, 0x20,
    0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x61, 0x70,
    0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f,
    0x72, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x07,
    0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
    0x6d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53,
    0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x07, 0x73,
    0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72,
    0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x79,
    0x73, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e,
    0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
    0x0b, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x42, 0x07, 0x0a, 0x05,
    0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0xb9, 0x01, 0x0a, 0x0f, 0x4d, 0x79, 0x73, 0x74, 0x69, 0x6b,
    0x6f, 0x4c, 0x69, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x59, 0x53,
    0x54, 0x49, 0x4b, 0x4f, 0x5f, 0x4c, 0x49, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55,
    0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29,
    0x4d, 0x59, 0x53, 0x54, 0x49, 0x4b, 0x4f, 0x5f, 0x4c, 0x49, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f,
    0x52, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x59, 0x53, 0x54, 0x49, 0x4b, 0x4f, 0x5f, 0x47, 0x55,
    0x41, 0x52, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x4d,
    0x59, 0x53, 0x54, 0x49, 0x4b, 0x4f, 0x5f, 0x4c, 0x49, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
    0x5f, 0x44, 0x45, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f, 0x4d, 0x45, 0x53,
    0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f,
    0x4d, 0x59, 0x53, 0x54, 0x49, 0x4b, 0x4f, 0x5f, 0x4c, 0x49, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f,
    0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
    0x03, 0x2a, 0x92, 0x02, 0x0a, 0x0c, 0x4d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x45, 0x72, 0x72,
    0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x59, 0x53, 0x54, 0x49, 0x4b, 0x4f, 0x5f, 0x45, 0x52,
    0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
    0x00, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x59, 0x53, 0x54, 0x49, 0x4b, 0x4f, 0x5f, 0x45, 0x52, 0x52,
    0x4f, 0x52, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x49, 0x5a, 0x45, 0x52, 0x5f,
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x59, 0x53, 0x54, 0x49,
    0x4b, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x4e, 0x45, 0x52,
    0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x59, 0x53, 0x54,
    0x49, 0x4b, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x4c, 0x4f,
    0x41, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a,
    0x4d, 0x59, 0x53, 0x54, 0x49, 0x4b, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
    0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26,
    0x4d, 0x59, 0x53, 0x54, 0x49, 0x4b, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x41,
    0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
    0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x59, 0x53, 0x54,
    0x49, 0x4b, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
    0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x45,
    0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x2a, 0xfe, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75,
    0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x43, 0x43, 0x4f, 0x55,
    0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
    0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
    0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x43, 0x4f, 0x55,
    0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f,
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x43, 0x4f, 0x55,
    0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x4e, 0x45, 0x4d, 0x4f, 0x4e, 0x49,
    0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x43,
    0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x48, 0x45, 0x58, 0x5f, 0x53,
    0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x27, 0x0a,
    0x23, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e,
    0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x45,
    0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
    0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x53, 0x5f,
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x2a, 0xae, 0x02, 0x0a, 0x0b, 0x57, 0x61, 0x6c, 0x6c,
    0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x41, 0x4c, 0x4c, 0x45,
    0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
    0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f,
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52,
    0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f,
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x45, 0x52, 0x52,
    0x4f, 0x52, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x45,
    0x52, 0x52, 0x4f, 0x52, 0x5f, 0x48, 0x45, 0x58, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f,
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x41, 0x4c, 0x4c, 0x45,
    0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x4e, 0x45, 0x4d, 0x4f, 0x4e, 0x49, 0x43,
    0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x57, 0x41, 0x4c, 0x4c,
    0x45, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
    0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
    0x05, 0x12, 0x2a, 0x0a, 0x26, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f,
    0x52, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x53,
    0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x29, 0x0a,
    0x25, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f,
    0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54,
    0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x2a, 0xb9, 0x08, 0x0a, 0x0c, 0x44, 0x65, 0x70,
    0x6f, 0x73, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x50,
    0x4f, 0x53, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
    0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x45, 0x50, 0x4f,
    0x53, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x48, 0x45, 0x58, 0x5f, 0x53, 0x54,
    0x52, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20,
    0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x52,
    0x4f, 0x4d, 0x5f, 0x44, 0x45, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
    0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x45, 0x52,
    0x52, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x5f,
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x50, 0x4f, 0x53,
    0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
    0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x50,
    0x4f, 0x53, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x4e, 0x59, 0x48, 0x4f,
    0x57, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x45, 0x50,
    0x4f, 0x53, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49,
    0x43, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06,
    0x12, 0x29, 0x0a, 0x25, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f,
    0x52, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
    0x43, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x31, 0x0a, 0x2d, 0x44,
    0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4d,
    0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x43, 0x4f, 0x4e,
    0x54, 0x52, 0x41, 0x43, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x24,
    0x0a, 0x20, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
    0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x45, 0x52, 0x52,
    0x4f, 0x52, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f,
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x45,
    0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49,
    0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x45, 0x50, 0x4f, 0x53,
    0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x42,
    0x49, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0c, 0x12, 0x2c,
    0x0a, 0x28, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
    0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x49,
    0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0d, 0x12, 0x31, 0x0a, 0x2d,
    0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f,
    0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43,
    0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0e, 0x12,
    0x2e, 0x0a, 0x2a, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
    0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
    0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0f, 0x12,
    0x31, 0x0a, 0x2d, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
    0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x55, 0x50, 0x5f,
    0x46, 0x45, 0x45, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
    0x10, 0x10, 0x12, 0x31, 0x0a, 0x2d, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x45, 0x52,
    0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x42, 0x52, 0x49, 0x44,
    0x47, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x45, 0x52,
    0x52, 0x4f, 0x52, 0x10, 0x11, 0x12, 0x33, 0x0a, 0x2f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
    0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
    0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x41, 0x4d, 0x4f, 0x55,
    0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x12, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x45,
    0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x55,
    0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45,
    0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x13, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x45, 0x50, 0x4f,
    0x53, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54,
    0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x14, 0x12, 0x2b,
    0x0a, 0x27, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
    0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f,
    0x4b, 0x45, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x15, 0x12, 0x26, 0x0a, 0x22, 0x44,
    0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x50,
    0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f,
    0x52, 0x10, 0x16, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x45,
    0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x43,
    0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
    0x17, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52,
    0x4f, 0x52, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
    0x10, 0x18, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x45, 0x52,
    0x52, 0x4f, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52,
    0x4f, 0x52, 0x10, 0x19, 0x2a, 0xc5, 0x03, 0x0a, 0x0c, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72,
    0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x43, 0x41, 0x4e, 0x4e, 0x45, 0x52,
    0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
    0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x43, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x5f,
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48, 0x5f, 0x41, 0x43,
    0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x2f, 0x0a,
    0x2b, 0x53, 0x43, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e,
    0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f,
    0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x28,
    0x0a, 0x24, 0x53, 0x43, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
    0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59,
    0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x43, 0x41, 0x4e,
    0x4e, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f,
    0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x43, 0x41, 0x4e,
    0x4e, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
    0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x43, 0x41,
    0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f,
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43, 0x41, 0x4e, 0x4e,
    0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
    0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43, 0x41,
    0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f,
    0x48, 0x45, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x53,
    0x43, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x4e, 0x59,
    0x48, 0x4f, 0x57, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23, 0x53,
    0x43, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x43, 0x43,
    0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52,
    0x4f, 0x52, 0x10, 0x0a, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x43, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x5f,
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x48, 0x41, 0x4e,
    0x44, 0x4c, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0b, 0x2a, 0xdf, 0x01, 0x0a,
    0x10, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f,
    0x72, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x49, 0x5a, 0x45,
    0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
    0x45, 0x44, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e,
    0x49, 0x5a, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50,
    0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
    0x52, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x49,
    0x5a, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x41,
    0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x53,
    0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x49, 0x5a, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
    0x5f, 0x44, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
    0x49, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x59,
    0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x49, 0x5a, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
    0x41, 0x4e, 0x59, 0x48, 0x4f, 0x57, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x42, 0x7d,
    0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x61, 0x70,
    0x69, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72,
    0x6f, 0x74, 0x6f, 0x50, 0x01, 0xa2, 0x02, 0x03, 0x4d, 0x41, 0x58, 0xaa, 0x02, 0x0e, 0x4d, 0x79,
    0x73, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x4d,
    0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a,
    0x4d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x5c, 0x47,
    0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x4d, 0x79, 0x73,
    0x74, 0x69, 0x6b, 0x6f, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x4a, 0x96, 0x1d,
    0x0a, 0x06, 0x12, 0x04, 0x00, 0x00, 0x72, 0x01, 0x0a, 0x08, 0x0a, 0x01, 0x0c, 0x12, 0x03, 0x00,
    0x00, 0x12, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x02, 0x00, 0x17, 0x0a, 0x0a, 0x0a, 0x02,
    0x04, 0x00, 0x12, 0x04, 0x04, 0x00, 0x0a, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12,
    0x03, 0x04, 0x08, 0x13, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x05, 0x02,
    0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x05, 0x02, 0x0c, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x05, 0x0f, 0x13, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x05, 0x1b, 0x1c, 0x0a, 0x0c, 0x0a, 0x04, 0x04,
    0x00, 0x08, 0x00, 0x12, 0x04, 0x06, 0x02, 0x09, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x08,
    0x00, 0x01, 0x12, 0x03, 0x06, 0x08, 0x0e, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12,
    0x03, 0x07, 0x04, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x05, 0x12, 0x03, 0x07,
    0x04, 0x09, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x07, 0x0b, 0x0f,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x07, 0x1b, 0x1c, 0x0a, 0x0b,
    0x0a, 0x04, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x08, 0x04, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x02, 0x05, 0x12, 0x03, 0x08, 0x04, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x02, 0x01, 0x12, 0x03, 0x08, 0x0b, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x03,
    0x12, 0x03, 0x08, 0x1b, 0x1c, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x01, 0x12, 0x04, 0x0c, 0x00, 0x17,
    0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x0c, 0x08, 0x12, 0x0a, 0x0b, 0x0a,
    0x04, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x0d, 0x02, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x00, 0x05, 0x12, 0x03, 0x0d, 0x02, 0x06, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00,
    0x01, 0x12, 0x03, 0x0d, 0x08, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12,
    0x03, 0x0d, 0x23, 0x24, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x01, 0x08, 0x00, 0x12, 0x04, 0x0e, 0x02,
    0x16, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x08, 0x00, 0x01, 0x12, 0x03, 0x0e, 0x08, 0x0d,
    0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x01, 0x12, 0x03, 0x0f, 0x04, 0x25, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x01, 0x06, 0x12, 0x03, 0x0f, 0x04, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x0f, 0x14, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x01, 0x03, 0x12, 0x03, 0x0f, 0x23, 0x24, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x02, 0x12,
    0x03, 0x10, 0x04, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x06, 0x12, 0x03, 0x10,
    0x04, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x01, 0x12, 0x03, 0x10, 0x11, 0x18,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x03, 0x12, 0x03, 0x10, 0x23, 0x24, 0x0a, 0x0b,
    0x0a, 0x04, 0x04, 0x01, 0x02, 0x03, 0x12, 0x03, 0x11, 0x04, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x03, 0x06, 0x12, 0x03, 0x11, 0x04, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x03, 0x01, 0x12, 0x03, 0x11, 0x11, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x03, 0x03,
    0x12, 0x03, 0x11, 0x23, 0x24, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x04, 0x12, 0x03, 0x12,
    0x04, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x04, 0x06, 0x12, 0x03, 0x12, 0x04, 0x10,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x04, 0x01, 0x12, 0x03, 0x12, 0x11, 0x18, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x04, 0x03, 0x12, 0x03, 0x12, 0x23, 0x24, 0x0a, 0x0b, 0x0a, 0x04,
    0x04, 0x01, 0x02, 0x05, 0x12, 0x03, 0x13, 0x04, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x05, 0x06, 0x12, 0x03, 0x13, 0x04, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x05, 0x01,
    0x12, 0x03, 0x13, 0x11, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x05, 0x03, 0x12, 0x03,
    0x13, 0x23, 0x24, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x06, 0x12, 0x03, 0x14, 0x04, 0x25,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x06, 0x06, 0x12, 0x03, 0x14, 0x04, 0x10, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x06, 0x01, 0x12, 0x03, 0x14, 0x11, 0x18, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x06, 0x03, 0x12, 0x03, 0x14, 0x23, 0x24, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01,
    0x02, 0x07, 0x12, 0x03, 0x15, 0x04, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x07, 0x06,
    0x12, 0x03, 0x15, 0x04, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x07, 0x01, 0x12, 0x03,
    0x15, 0x15, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x07, 0x03, 0x12, 0x03, 0x15, 0x23,
    0x24, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x00, 0x12, 0x04, 0x19, 0x00, 0x1e, 0x01, 0x0a, 0x0a, 0x0a,
    0x03, 0x05, 0x00, 0x01, 0x12, 0x03, 0x19, 0x05, 0x14, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02,
    0x00, 0x12, 0x03, 0x1a, 0x02, 0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x1a, 0x02, 0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x1a,
    0x30, 0x31, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x01, 0x12, 0x03, 0x1b, 0x02, 0x32, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x1b, 0x02, 0x2b, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x1b, 0x30, 0x31, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x00, 0x02, 0x02, 0x12, 0x03, 0x1c, 0x02, 0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x02,
    0x01, 0x12, 0x03, 0x1c, 0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x02, 0x02, 0x12,
    0x03, 0x1c, 0x30, 0x31, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x03, 0x12, 0x03, 0x1d, 0x02,
    0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x1d, 0x02, 0x21, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x03, 0x02, 0x12, 0x03, 0x1d, 0x30, 0x31, 0x0a, 0x0a, 0x0a,
    0x02, 0x05, 0x01, 0x12, 0x04, 0x20, 0x00, 0x28, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x01, 0x01,
    0x12, 0x03, 0x20, 0x05, 0x11, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x00, 0x12, 0x03, 0x21,
    0x02, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x21, 0x02, 0x1b,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x00, 0x02, 0x12, 0x03, 0x21, 0x2d, 0x2e, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x01, 0x02, 0x01, 0x12, 0x03, 0x22, 0x02, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x22, 0x02, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02,
    0x01, 0x02, 0x12, 0x03, 0x22, 0x2d, 0x2e, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x02, 0x12,
    0x03, 0x23, 0x02, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x02, 0x01, 0x12, 0x03, 0x23,
    0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x02, 0x02, 0x12, 0x03, 0x23, 0x2d, 0x2e,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x03, 0x12, 0x03, 0x24, 0x02, 0x2f, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x01, 0x02, 0x03, 0x01, 0x12, 0x03, 0x24, 0x02, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x01, 0x02, 0x03, 0x02, 0x12, 0x03, 0x24, 0x2d, 0x2e, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02,
    0x04, 0x12, 0x03, 0x25, 0x02, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x04, 0x01, 0x12,
    0x03, 0x25, 0x02, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x04, 0x02, 0x12, 0x03, 0x25,
    0x2d, 0x2e, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x05, 0x12, 0x03, 0x26, 0x02, 0x2f, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x05, 0x01, 0x12, 0x03, 0x26, 0x02, 0x28, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x01, 0x02, 0x05, 0x02, 0x12, 0x03, 0x26, 0x2d, 0x2e, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x01, 0x02, 0x06, 0x12, 0x03, 0x27, 0x02, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x06,
    0x01, 0x12, 0x03, 0x27, 0x02, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x06, 0x02, 0x12,
    0x03, 0x27, 0x2d, 0x2e, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x02, 0x12, 0x04, 0x2a, 0x00, 0x32, 0x01,
    0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x02, 0x01, 0x12, 0x03, 0x2a, 0x05, 0x11, 0x0a, 0x0b, 0x0a, 0x04,
    0x05, 0x02, 0x02, 0x00, 0x12, 0x03, 0x2b, 0x02, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02,
    0x00, 0x01, 0x12, 0x03, 0x2b, 0x02, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x00, 0x02,
    0x12, 0x03, 0x2b, 0x28, 0x29, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x01, 0x12, 0x03, 0x2c,
    0x02, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x01, 0x01, 0x12, 0x03, 0x2c, 0x02, 0x1d,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x01, 0x02, 0x12, 0x03, 0x2c, 0x28, 0x29, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x02, 0x02, 0x02, 0x12, 0x03, 0x2d, 0x02, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x02, 0x02, 0x02, 0x01, 0x12, 0x03, 0x2d, 0x02, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02,
    0x02, 0x02, 0x12, 0x03, 0x2d, 0x28, 0x29, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x03, 0x12,
    0x03, 0x2e, 0x02, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x03, 0x01, 0x12, 0x03, 0x2e,
    0x02, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x03, 0x02, 0x12, 0x03, 0x2e, 0x28, 0x29,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x04, 0x12, 0x03, 0x2f, 0x02, 0x2a, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x02, 0x02, 0x04, 0x01, 0x12, 0x03, 0x2f, 0x02, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x02, 0x02, 0x04, 0x02, 0x12, 0x03, 0x2f, 0x28, 0x29, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02,
    0x05, 0x12, 0x03, 0x30, 0x02, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x05, 0x01, 0x12,
    0x03, 0x30, 0x02, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x05, 0x02, 0x12, 0x03, 0x30,
    0x28, 0x29, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x06, 0x12, 0x03, 0x31, 0x02, 0x2a, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x06, 0x01, 0x12, 0x03, 0x31, 0x02, 0x1d, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x02, 0x02, 0x06, 0x02, 0x12, 0x03, 0x31, 0x28, 0x29, 0x0a, 0x0a, 0x0a, 0x02, 0x05,
    0x03, 0x12, 0x04, 0x34, 0x00, 0x3d, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x03, 0x01, 0x12, 0x03,
    0x34, 0x05, 0x10, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x00, 0x12, 0x03, 0x35, 0x02, 0x2d,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x00, 0x01, 0x12, 0x03, 0x35, 0x02, 0x1a, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x03, 0x02, 0x00, 0x02, 0x12, 0x03, 0x35, 0x2b, 0x2c, 0x0a, 0x0b, 0x0a, 0x04,
    0x05, 0x03, 0x02, 0x01, 0x12, 0x03, 0x36, 0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02,
    0x01, 0x01, 0x12, 0x03, 0x36, 0x02, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x01, 0x02,
    0x12, 0x03, 0x36, 0x2b, 0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x02, 0x12, 0x03, 0x37,
    0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x02, 0x01, 0x12, 0x03, 0x37, 0x02, 0x1b,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x02, 0x02, 0x12, 0x03, 0x37, 0x2b, 0x2c, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x03, 0x02, 0x03, 0x12, 0x03, 0x38, 0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x03, 0x02, 0x03, 0x01, 0x12, 0x03, 0x38, 0x02, 0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02,
    0x03, 0x02, 0x12, 0x03, 0x38, 0x2b, 0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x04, 0x12,
    0x03, 0x39, 0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x04, 0x01, 0x12, 0x03, 0x39,
    0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x04, 0x02, 0x12, 0x03, 0x39, 0x2b, 0x2c,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x05, 0x12, 0x03, 0x3a, 0x02, 0x2d, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x03, 0x02, 0x05, 0x01, 0x12, 0x03, 0x3a, 0x02, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x03, 0x02, 0x05, 0x02, 0x12, 0x03, 0x3a, 0x2b, 0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02,
    0x06, 0x12, 0x03, 0x3b, 0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x06, 0x01, 0x12,
    0x03, 0x3b, 0x02, 0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x06, 0x02, 0x12, 0x03, 0x3b,
    0x2b, 0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x07, 0x12, 0x03, 0x3c, 0x02, 0x2d, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x07, 0x01, 0x12, 0x03, 0x3c, 0x02, 0x27, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x03, 0x02, 0x07, 0x02, 0x12, 0x03, 0x3c, 0x2b, 0x2c, 0x0a, 0x0a, 0x0a, 0x02, 0x05,
    0x04, 0x12, 0x04, 0x3f, 0x00, 0x5b, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x04, 0x01, 0x12, 0x03,
    0x3f, 0x05, 0x11, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x00, 0x12, 0x03, 0x40, 0x02, 0x36,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x00, 0x01, 0x12, 0x03, 0x40, 0x02, 0x1b, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x04, 0x02, 0x00, 0x02, 0x12, 0x03, 0x40, 0x34, 0x35, 0x0a, 0x0b, 0x0a, 0x04,
    0x05, 0x04, 0x02, 0x01, 0x12, 0x03, 0x41, 0x02, 0x36, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02,
    0x01, 0x01, 0x12, 0x03, 0x41, 0x02, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x01, 0x02,
    0x12, 0x03, 0x41, 0x34, 0x35, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x02, 0x12, 0x03, 0x42,
    0x02, 0x36, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x02, 0x01, 0x12, 0x03, 0x42, 0x02, 0x22,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x02, 0x02, 0x12, 0x03, 0x42, 0x34, 0x35, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x04, 0x02, 0x03, 0x12, 0x03, 0x43, 0x02, 0x36, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x04, 0x02, 0x03, 0x01, 0x12, 0x03, 0x43, 0x02, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02,
    0x03, 0x02, 0x12, 0x03, 0x43, 0x34, 0x35, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x04, 0x12,
    0x03, 0x44, 0x02, 0x36, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x04, 0x01, 0x12, 0x03, 0x44,
    0x02, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x04, 0x02, 0x12, 0x03, 0x44, 0x34, 0x35,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x05, 0x12, 0x03, 0x45, 0x02, 0x36, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x04, 0x02, 0x05, 0x01, 0x12, 0x03, 0x45, 0x02, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x04, 0x02, 0x05, 0x02, 0x12, 0x03, 0x45, 0x34, 0x35, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02,
    0x06, 0x12, 0x03, 0x46, 0x02, 0x36, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x06, 0x01, 0x12,
    0x03, 0x46, 0x02, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x06, 0x02, 0x12, 0x03, 0x46,
    0x34, 0x35, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x07, 0x12, 0x03, 0x47, 0x02, 0x36, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x07, 0x01, 0x12, 0x03, 0x47, 0x02, 0x27, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x04, 0x02, 0x07, 0x02, 0x12, 0x03, 0x47, 0x34, 0x35, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x04, 0x02, 0x08, 0x12, 0x03, 0x48, 0x02, 0x36, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x08,
    0x01, 0x12, 0x03, 0x48, 0x02, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x08, 0x02, 0x12,
    0x03, 0x48, 0x34, 0x35, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x09, 0x12, 0x03, 0x49, 0x02,
    0x36, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x09, 0x01, 0x12, 0x03, 0x49, 0x02, 0x22, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x09, 0x02, 0x12, 0x03, 0x49, 0x34, 0x35, 0x0a, 0x0b, 0x0a,
    0x04, 0x05, 0x04, 0x02, 0x0a, 0x12, 0x03, 0x4a, 0x02, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04,
    0x02, 0x0a, 0x01, 0x12, 0x03, 0x4a, 0x02, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x0a,
    0x02, 0x12, 0x03, 0x4a, 0x34, 0x36, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x0b, 0x12, 0x03,
    0x4b, 0x02, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x0b, 0x01, 0x12, 0x03, 0x4b, 0x02,
    0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x0b, 0x02, 0x12, 0x03, 0x4b, 0x34, 0x36, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x0c, 0x12, 0x03, 0x4c, 0x02, 0x37, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x04, 0x02, 0x0c, 0x01, 0x12, 0x03, 0x4c, 0x02, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04,
    0x02, 0x0c, 0x02, 0x12, 0x03, 0x4c, 0x34, 0x36, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x0d,
    0x12, 0x03, 0x4d, 0x02, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x0d, 0x01, 0x12, 0x03,
    0x4d, 0x02, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x0d, 0x02, 0x12, 0x03, 0x4d, 0x34,
    0x36, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x0e, 0x12, 0x03, 0x4e, 0x02, 0x37, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x04, 0x02, 0x0e, 0x01, 0x12, 0x03, 0x4e, 0x02, 0x2f, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x04, 0x02, 0x0e, 0x02, 0x12, 0x03, 0x4e, 0x34, 0x36, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04,
    0x02, 0x0f, 0x12, 0x03, 0x4f, 0x02, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x0f, 0x01,
    0x12, 0x03, 0x4f, 0x02, 0x2c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x0f, 0x02, 0x12, 0x03,
    0x4f, 0x34, 0x36, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x10, 0x12, 0x03, 0x50, 0x02, 0x37,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x10, 0x01, 0x12, 0x03, 0x50, 0x02, 0x2f, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x04, 0x02, 0x10, 0x02, 0x12, 0x03, 0x50, 0x34, 0x36, 0x0a, 0x0b, 0x0a, 0x04,
    0x05, 0x04, 0x02, 0x11, 0x12, 0x03, 0x51, 0x02, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02,
    0x11, 0x01, 0x12, 0x03, 0x51, 0x02, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x11, 0x02,
    0x12, 0x03, 0x51, 0x34, 0x36, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x12, 0x12, 0x03, 0x52,
    0x02, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x12, 0x01, 0x12, 0x03, 0x52, 0x02, 0x31,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x12, 0x02, 0x12, 0x03, 0x52, 0x34, 0x36, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x04, 0x02, 0x13, 0x12, 0x03, 0x53, 0x02, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x04, 0x02, 0x13, 0x01, 0x12, 0x03, 0x53, 0x02, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02,
    0x13, 0x02, 0x12, 0x03, 0x53, 0x34, 0x36, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x14, 0x12,
    0x03, 0x54, 0x02, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x14, 0x01, 0x12, 0x03, 0x54,
    0x02, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x14, 0x02, 0x12, 0x03, 0x54, 0x34, 0x36,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x15, 0x12, 0x03, 0x55, 0x02, 0x37, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x04, 0x02, 0x15, 0x01, 0x12, 0x03, 0x55, 0x02, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x04, 0x02, 0x15, 0x02, 0x12, 0x03, 0x55, 0x34, 0x36, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02,
    0x16, 0x12, 0x03, 0x56, 0x02, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x16, 0x01, 0x12,
    0x03, 0x56, 0x02, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x16, 0x02, 0x12, 0x03, 0x56,
    0x34, 0x36, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x17, 0x12, 0x03, 0x57, 0x02, 0x37, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x17, 0x01, 0x12, 0x03, 0x57, 0x02, 0x2a, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x04, 0x02, 0x17, 0x02, 0x12, 0x03, 0x57, 0x34, 0x36, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x04, 0x02, 0x18, 0x12, 0x03, 0x58, 0x02, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x18,
    0x01, 0x12, 0x03, 0x58, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x18, 0x02, 0x12,
    0x03, 0x58, 0x34, 0x36, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x19, 0x12, 0x03, 0x59, 0x02,
    0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x19, 0x01, 0x12, 0x03, 0x59, 0x02, 0x1e, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x19, 0x02, 0x12, 0x03, 0x59, 0x34, 0x36, 0x0a, 0x0a, 0x0a,
    0x02, 0x05, 0x05, 0x12, 0x04, 0x5d, 0x00, 0x6a, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x05, 0x01,
    0x12, 0x03, 0x5d, 0x05, 0x11, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x00, 0x12, 0x03, 0x5e,
    0x02, 0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x00, 0x01, 0x12, 0x03, 0x5e, 0x02, 0x1b,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x00, 0x02, 0x12, 0x03, 0x5e, 0x30, 0x31, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x05, 0x02, 0x01, 0x12, 0x03, 0x5f, 0x02, 0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x05, 0x02, 0x01, 0x01, 0x12, 0x03, 0x5f, 0x02, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02,
    0x01, 0x02, 0x12, 0x03, 0x5f, 0x30, 0x31, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x02, 0x12,
    0x03, 0x60, 0x02, 0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x02, 0x01, 0x12, 0x03, 0x60,
    0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x02, 0x02, 0x12, 0x03, 0x60, 0x30, 0x31,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x03, 0x12, 0x03, 0x61, 0x02, 0x32, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x05, 0x02, 0x03, 0x01, 0x12, 0x03, 0x61, 0x02, 0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x05, 0x02, 0x03, 0x02, 0x12, 0x03, 0x61, 0x30, 0x31, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02,
    0x04, 0x12, 0x03, 0x62, 0x02, 0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x04, 0x01, 0x12,
    0x03, 0x62, 0x02, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x04, 0x02, 0x12, 0x03, 0x62,
    0x30, 0x31, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x05, 0x12, 0x03, 0x63, 0x02, 0x32, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x05, 0x01, 0x12, 0x03, 0x63, 0x02, 0x1d, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x05, 0x02, 0x05, 0x02, 0x12, 0x03, 0x63, 0x30, 0x31, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x05, 0x02, 0x06, 0x12, 0x03, 0x64, 0x02, 0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x06,
    0x01, 0x12, 0x03, 0x64, 0x02, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x06, 0x02, 0x12,
    0x03, 0x64, 0x30, 0x31, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x07, 0x12, 0x03, 0x65, 0x02,
    0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x07, 0x01, 0x12, 0x03, 0x65, 0x02, 0x1e, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x07, 0x02, 0x12, 0x03, 0x65, 0x30, 0x31, 0x0a, 0x0b, 0x0a,
    0x04, 0x05, 0x05, 0x02, 0x08, 0x12, 0x03, 0x66, 0x02, 0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05,
    0x02, 0x08, 0x01, 0x12, 0x03, 0x66, 0x02, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x08,
    0x02, 0x12, 0x03, 0x66, 0x30, 0x31, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x09, 0x12, 0x03,
    0x67, 0x02, 0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x09, 0x01, 0x12, 0x03, 0x67, 0x02,
    0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x09, 0x02, 0x12, 0x03, 0x67, 0x30, 0x31, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x0a, 0x12, 0x03, 0x68, 0x02, 0x33, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x05, 0x02, 0x0a, 0x01, 0x12, 0x03, 0x68, 0x02, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05,
    0x02, 0x0a, 0x02, 0x12, 0x03, 0x68, 0x30, 0x32, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x0b,
    0x12, 0x03, 0x69, 0x02, 0x33, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x0b, 0x01, 0x12, 0x03,
    0x69, 0x02, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x0b, 0x02, 0x12, 0x03, 0x69, 0x30,
    0x32, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x06, 0x12, 0x04, 0x6c, 0x00, 0x72, 0x01, 0x0a, 0x0a, 0x0a,
    0x03, 0x05, 0x06, 0x01, 0x12, 0x03, 0x6c, 0x05, 0x15, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x06, 0x02,
    0x00, 0x12, 0x03, 0x6d, 0x02, 0x30, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x6d, 0x02, 0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x00, 0x02, 0x12, 0x03, 0x6d,
    0x2e, 0x2f, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x06, 0x02, 0x01, 0x12, 0x03, 0x6e, 0x02, 0x30, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x01, 0x01, 0x12, 0x03, 0x6e, 0x02, 0x2b, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x06, 0x02, 0x01, 0x02, 0x12, 0x03, 0x6e, 0x2e, 0x2f, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x06, 0x02, 0x02, 0x12, 0x03, 0x6f, 0x02, 0x30, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x02,
    0x01, 0x12, 0x03, 0x6f, 0x02, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x02, 0x02, 0x12,
    0x03, 0x6f, 0x2e, 0x2f, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x06, 0x02, 0x03, 0x12, 0x03, 0x70, 0x02,
    0x30, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x03, 0x01, 0x12, 0x03, 0x70, 0x02, 0x2b, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x03, 0x02, 0x12, 0x03, 0x70, 0x2e, 0x2f, 0x0a, 0x0b, 0x0a,
    0x04, 0x05, 0x06, 0x02, 0x04, 0x12, 0x03, 0x71, 0x02, 0x30, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x06,
    0x02, 0x04, 0x01, 0x12, 0x03, 0x71, 0x02, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x04,
    0x02, 0x12, 0x03, 0x71, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
];
include!("mystiko.api.v1.serde.rs");
// @@protoc_insertion_point(module)