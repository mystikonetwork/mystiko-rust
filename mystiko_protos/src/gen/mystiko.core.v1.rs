// @generated
#[derive(typed_builder::TypedBuilder)]
#[builder(field_defaults(default, setter(into)))]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MystikoOptions {
    #[prost(bool, tag="1")]
    pub is_testnet: bool,
    #[prost(bool, tag="2")]
    pub is_staging: bool,
    #[prost(string, optional, tag="3")]
    pub db_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="4")]
    pub config_file_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="5")]
    pub config_remote_base_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="6")]
    pub config_git_revision: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BridgeType {
    Unspecified = 0,
    Loop = 1,
    Poly = 2,
    Tbridge = 3,
    Celer = 4,
    LayerZero = 5,
    Axelar = 6,
}
impl BridgeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            BridgeType::Unspecified => "BRIDGE_TYPE_UNSPECIFIED",
            BridgeType::Loop => "BRIDGE_TYPE_LOOP",
            BridgeType::Poly => "BRIDGE_TYPE_POLY",
            BridgeType::Tbridge => "BRIDGE_TYPE_TBRIDGE",
            BridgeType::Celer => "BRIDGE_TYPE_CELER",
            BridgeType::LayerZero => "BRIDGE_TYPE_LAYER_ZERO",
            BridgeType::Axelar => "BRIDGE_TYPE_AXELAR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BRIDGE_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "BRIDGE_TYPE_LOOP" => Some(Self::Loop),
            "BRIDGE_TYPE_POLY" => Some(Self::Poly),
            "BRIDGE_TYPE_TBRIDGE" => Some(Self::Tbridge),
            "BRIDGE_TYPE_CELER" => Some(Self::Celer),
            "BRIDGE_TYPE_LAYER_ZERO" => Some(Self::LayerZero),
            "BRIDGE_TYPE_AXELAR" => Some(Self::Axelar),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ContractType {
    Unspecified = 0,
    Deposit = 1,
    Pool = 2,
}
impl ContractType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ContractType::Unspecified => "CONTRACT_TYPE_UNSPECIFIED",
            ContractType::Deposit => "CONTRACT_TYPE_DEPOSIT",
            ContractType::Pool => "CONTRACT_TYPE_POOL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CONTRACT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "CONTRACT_TYPE_DEPOSIT" => Some(Self::Deposit),
            "CONTRACT_TYPE_POOL" => Some(Self::Pool),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AssetType {
    Unspecified = 0,
    Erc20 = 1,
    Main = 2,
}
impl AssetType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AssetType::Unspecified => "ASSET_TYPE_UNSPECIFIED",
            AssetType::Erc20 => "ASSET_TYPE_ERC20",
            AssetType::Main => "ASSET_TYPE_MAIN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ASSET_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "ASSET_TYPE_ERC20" => Some(Self::Erc20),
            "ASSET_TYPE_MAIN" => Some(Self::Main),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CircuitType {
    Unspecified = 0,
    Rollup1 = 1,
    Rollup2 = 2,
    Rollup4 = 3,
    Rollup8 = 4,
    Rollup16 = 5,
    Transaction1x0 = 6,
    Transaction1x1 = 7,
    Transaction1x2 = 8,
    Transaction2x0 = 9,
    Transaction2x1 = 10,
    Transaction2x2 = 11,
}
impl CircuitType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CircuitType::Unspecified => "CIRCUIT_TYPE_UNSPECIFIED",
            CircuitType::Rollup1 => "CIRCUIT_TYPE_ROLLUP_1",
            CircuitType::Rollup2 => "CIRCUIT_TYPE_ROLLUP_2",
            CircuitType::Rollup4 => "CIRCUIT_TYPE_ROLLUP_4",
            CircuitType::Rollup8 => "CIRCUIT_TYPE_ROLLUP_8",
            CircuitType::Rollup16 => "CIRCUIT_TYPE_ROLLUP_16",
            CircuitType::Transaction1x0 => "CIRCUIT_TYPE_TRANSACTION1X0",
            CircuitType::Transaction1x1 => "CIRCUIT_TYPE_TRANSACTION1X1",
            CircuitType::Transaction1x2 => "CIRCUIT_TYPE_TRANSACTION1X2",
            CircuitType::Transaction2x0 => "CIRCUIT_TYPE_TRANSACTION2X0",
            CircuitType::Transaction2x1 => "CIRCUIT_TYPE_TRANSACTION2X1",
            CircuitType::Transaction2x2 => "CIRCUIT_TYPE_TRANSACTION2X2",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CIRCUIT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "CIRCUIT_TYPE_ROLLUP_1" => Some(Self::Rollup1),
            "CIRCUIT_TYPE_ROLLUP_2" => Some(Self::Rollup2),
            "CIRCUIT_TYPE_ROLLUP_4" => Some(Self::Rollup4),
            "CIRCUIT_TYPE_ROLLUP_8" => Some(Self::Rollup8),
            "CIRCUIT_TYPE_ROLLUP_16" => Some(Self::Rollup16),
            "CIRCUIT_TYPE_TRANSACTION1X0" => Some(Self::Transaction1x0),
            "CIRCUIT_TYPE_TRANSACTION1X1" => Some(Self::Transaction1x1),
            "CIRCUIT_TYPE_TRANSACTION1X2" => Some(Self::Transaction1x2),
            "CIRCUIT_TYPE_TRANSACTION2X0" => Some(Self::Transaction2x0),
            "CIRCUIT_TYPE_TRANSACTION2X1" => Some(Self::Transaction2x1),
            "CIRCUIT_TYPE_TRANSACTION2X2" => Some(Self::Transaction2x2),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ProviderType {
    Unspecified = 0,
    Failover = 1,
    Quorum = 2,
}
impl ProviderType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ProviderType::Unspecified => "PROVIDER_TYPE_UNSPECIFIED",
            ProviderType::Failover => "PROVIDER_TYPE_FAILOVER",
            ProviderType::Quorum => "PROVIDER_TYPE_QUORUM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PROVIDER_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "PROVIDER_TYPE_FAILOVER" => Some(Self::Failover),
            "PROVIDER_TYPE_QUORUM" => Some(Self::Quorum),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AccountStatus {
    Unspecified = 0,
    Created = 1,
    Scanning = 2,
    Scanned = 3,
}
impl AccountStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AccountStatus::Unspecified => "ACCOUNT_STATUS_UNSPECIFIED",
            AccountStatus::Created => "ACCOUNT_STATUS_CREATED",
            AccountStatus::Scanning => "ACCOUNT_STATUS_SCANNING",
            AccountStatus::Scanned => "ACCOUNT_STATUS_SCANNED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ACCOUNT_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "ACCOUNT_STATUS_CREATED" => Some(Self::Created),
            "ACCOUNT_STATUS_SCANNING" => Some(Self::Scanning),
            "ACCOUNT_STATUS_SCANNED" => Some(Self::Scanned),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DepositStatus {
    Unspecified = 0,
    Init = 1,
    AssetApproving = 2,
    AssetApproved = 3,
    SrcPending = 4,
    SrcSucceeded = 5,
    Queued = 6,
    Included = 7,
    Failed = 8,
}
impl DepositStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            DepositStatus::Unspecified => "DEPOSIT_STATUS_UNSPECIFIED",
            DepositStatus::Init => "DEPOSIT_STATUS_INIT",
            DepositStatus::AssetApproving => "DEPOSIT_STATUS_ASSET_APPROVING",
            DepositStatus::AssetApproved => "DEPOSIT_STATUS_ASSET_APPROVED",
            DepositStatus::SrcPending => "DEPOSIT_STATUS_SRC_PENDING",
            DepositStatus::SrcSucceeded => "DEPOSIT_STATUS_SRC_SUCCEEDED",
            DepositStatus::Queued => "DEPOSIT_STATUS_QUEUED",
            DepositStatus::Included => "DEPOSIT_STATUS_INCLUDED",
            DepositStatus::Failed => "DEPOSIT_STATUS_FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DEPOSIT_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "DEPOSIT_STATUS_INIT" => Some(Self::Init),
            "DEPOSIT_STATUS_ASSET_APPROVING" => Some(Self::AssetApproving),
            "DEPOSIT_STATUS_ASSET_APPROVED" => Some(Self::AssetApproved),
            "DEPOSIT_STATUS_SRC_PENDING" => Some(Self::SrcPending),
            "DEPOSIT_STATUS_SRC_SUCCEEDED" => Some(Self::SrcSucceeded),
            "DEPOSIT_STATUS_QUEUED" => Some(Self::Queued),
            "DEPOSIT_STATUS_INCLUDED" => Some(Self::Included),
            "DEPOSIT_STATUS_FAILED" => Some(Self::Failed),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TransactionStatus {
    Unspecified = 0,
    Init = 1,
    ProofGenerating = 2,
    ProofGenerated = 3,
    Pending = 4,
    Succeeded = 5,
    Failed = 6,
}
impl TransactionStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TransactionStatus::Unspecified => "TRANSACTION_STATUS_UNSPECIFIED",
            TransactionStatus::Init => "TRANSACTION_STATUS_INIT",
            TransactionStatus::ProofGenerating => "TRANSACTION_STATUS_PROOF_GENERATING",
            TransactionStatus::ProofGenerated => "TRANSACTION_STATUS_PROOF_GENERATED",
            TransactionStatus::Pending => "TRANSACTION_STATUS_PENDING",
            TransactionStatus::Succeeded => "TRANSACTION_STATUS_SUCCEEDED",
            TransactionStatus::Failed => "TRANSACTION_STATUS_FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRANSACTION_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "TRANSACTION_STATUS_INIT" => Some(Self::Init),
            "TRANSACTION_STATUS_PROOF_GENERATING" => Some(Self::ProofGenerating),
            "TRANSACTION_STATUS_PROOF_GENERATED" => Some(Self::ProofGenerated),
            "TRANSACTION_STATUS_PENDING" => Some(Self::Pending),
            "TRANSACTION_STATUS_SUCCEEDED" => Some(Self::Succeeded),
            "TRANSACTION_STATUS_FAILED" => Some(Self::Failed),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TransactionType {
    Unspecified = 0,
    Transfer = 1,
    Withdraw = 2,
}
impl TransactionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TransactionType::Unspecified => "TRANSACTION_TYPE_UNSPECIFIED",
            TransactionType::Transfer => "TRANSACTION_TYPE_TRANSFER",
            TransactionType::Withdraw => "TRANSACTION_TYPE_WITHDRAW",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRANSACTION_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "TRANSACTION_TYPE_TRANSFER" => Some(Self::Transfer),
            "TRANSACTION_TYPE_WITHDRAW" => Some(Self::Withdraw),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum NetworkType {
    Unspecified = 0,
    Testnet = 1,
    Mainnet = 2,
}
impl NetworkType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            NetworkType::Unspecified => "NETWORK_TYPE_UNSPECIFIED",
            NetworkType::Testnet => "NETWORK_TYPE_TESTNET",
            NetworkType::Mainnet => "NETWORK_TYPE_MAINNET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NETWORK_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "NETWORK_TYPE_TESTNET" => Some(Self::Testnet),
            "NETWORK_TYPE_MAINNET" => Some(Self::Mainnet),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PackerChecksum {
    Unspecified = 0,
    Sha512 = 1,
}
impl PackerChecksum {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            PackerChecksum::Unspecified => "PACKER_CHECKSUM_UNSPECIFIED",
            PackerChecksum::Sha512 => "PACKER_CHECKSUM_SHA512",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PACKER_CHECKSUM_UNSPECIFIED" => Some(Self::Unspecified),
            "PACKER_CHECKSUM_SHA512" => Some(Self::Sha512),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PackerCompression {
    Unspecified = 0,
    Zstd = 1,
}
impl PackerCompression {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            PackerCompression::Unspecified => "PACKER_COMPRESSION_UNSPECIFIED",
            PackerCompression::Zstd => "PACKER_COMPRESSION_ZSTD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PACKER_COMPRESSION_UNSPECIFIED" => Some(Self::Unspecified),
            "PACKER_COMPRESSION_ZSTD" => Some(Self::Zstd),
            _ => None,
        }
    }
}
/// Encoded file descriptor set for the `mystiko.core.v1` package
pub const FILE_DESCRIPTOR_SET: &[u8] = &[
    0x0a, 0xc1, 0x2b, 0x0a, 0x1c, 0x6d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x2f, 0x63, 0x6f, 0x72,
    0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
    0x6f, 0x12, 0x0f, 0x6d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
    0x76, 0x31, 0x22, 0xde, 0x02, 0x0a, 0x0e, 0x4d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x4f, 0x70,
    0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x73, 0x74,
    0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x54, 0x65, 0x73,
    0x74, 0x6e, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x69,
    0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x74, 0x61, 0x67,
    0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03,
    0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x64, 0x62, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01,
    0x01, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65,
    0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x63,
    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01,
    0x12, 0x38, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
    0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
    0x48, 0x02, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
    0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x6f,
    0x6e, 0x66, 0x69, 0x67, 0x5f, 0x67, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
    0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69,
    0x67, 0x47, 0x69, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
    0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x13, 0x0a, 0x11, 0x5f,
    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
    0x42, 0x19, 0x0a, 0x17, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
    0x74, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f,
    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x67, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73,
    0x69, 0x6f, 0x6e, 0x2a, 0xb9, 0x01, 0x0a, 0x0a, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x79,
    0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
    0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
    0x14, 0x0a, 0x10, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
    0x4f, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f,
    0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x42,
    0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x42, 0x52, 0x49, 0x44,
    0x47, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x54,
    0x59, 0x50, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x42,
    0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52,
    0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x52, 0x49, 0x44, 0x47,
    0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x58, 0x45, 0x4c, 0x41, 0x52, 0x10, 0x06, 0x2a,
    0x60, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
    0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
    0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19,
    0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
    0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e,
    0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10,
    0x02, 0x2a, 0x52, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
    0x0a, 0x16, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
    0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x53,
    0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x10, 0x01,
    0x12, 0x13, 0x0a, 0x0f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
    0x41, 0x49, 0x4e, 0x10, 0x02, 0x2a, 0xf9, 0x02, 0x0a, 0x0b, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
    0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54,
    0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
    0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x54,
    0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x55, 0x50, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x19,
    0x0a, 0x15, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
    0x4f, 0x4c, 0x4c, 0x55, 0x50, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x49, 0x52,
    0x43, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x55, 0x50,
    0x5f, 0x34, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f,
    0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x55, 0x50, 0x5f, 0x38, 0x10, 0x04, 0x12,
    0x1a, 0x0a, 0x16, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
    0x52, 0x4f, 0x4c, 0x4c, 0x55, 0x50, 0x5f, 0x31, 0x36, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x43,
    0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e,
    0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x31, 0x58, 0x30, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b,
    0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41,
    0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x31, 0x58, 0x31, 0x10, 0x07, 0x12, 0x1f, 0x0a,
    0x1b, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52,
    0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x31, 0x58, 0x32, 0x10, 0x08, 0x12, 0x1f,
    0x0a, 0x1b, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
    0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x32, 0x58, 0x30, 0x10, 0x09, 0x12,
    0x1f, 0x0a, 0x1b, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
    0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x32, 0x58, 0x31, 0x10, 0x0a,
    0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
    0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x32, 0x58, 0x32, 0x10,
    0x0b, 0x2a, 0x63, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
    0x65, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59,
    0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
    0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
    0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
    0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55,
    0x4f, 0x52, 0x55, 0x4d, 0x10, 0x02, 0x2a, 0x84, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75,
    0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x43, 0x4f,
    0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
    0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x43, 0x4f,
    0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
    0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
    0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10,
    0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
    0x54, 0x55, 0x53, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xa4, 0x02,
    0x0a, 0x0d, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
    0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
    0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
    0x17, 0x0a, 0x13, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
    0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x45, 0x50, 0x4f,
    0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54,
    0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d,
    0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
    0x53, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12,
    0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
    0x53, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12,
    0x20, 0x0a, 0x1c, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
    0x53, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10,
    0x05, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41,
    0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17,
    0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
    0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x50,
    0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c,
    0x45, 0x44, 0x10, 0x08, 0x2a, 0x86, 0x02, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
    0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x52,
    0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
    0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b,
    0x0a, 0x17, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
    0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x54,
    0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
    0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49,
    0x4e, 0x47, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
    0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46,
    0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a,
    0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
    0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c,
    0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
    0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1d,
    0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
    0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x71, 0x0a,
    0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
    0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
    0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
    0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
    0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10,
    0x01, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
    0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10, 0x02,
    0x2a, 0x5f, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
    0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
    0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a,
    0x14, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45,
    0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x45, 0x54, 0x57, 0x4f,
    0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10,
    0x02, 0x2a, 0x4d, 0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b,
    0x73, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x48,
    0x45, 0x43, 0x4b, 0x53, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
    0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x43,
    0x48, 0x45, 0x43, 0x4b, 0x53, 0x55, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x10, 0x01,
    0x2a, 0x54, 0x0a, 0x11, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
    0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x5f,
    0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
    0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41, 0x43,
    0x4b, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
    0x5a, 0x53, 0x54, 0x44, 0x10, 0x01, 0x42, 0x80, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
    0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0b,
    0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0xa2, 0x02, 0x03,
    0x4d, 0x43, 0x58, 0xaa, 0x02, 0x0f, 0x4d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x43, 0x6f,
    0x72, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x4d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x5c,
    0x43, 0x6f, 0x72, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x4d, 0x79, 0x73, 0x74, 0x69, 0x6b,
    0x6f, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
    0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x4d, 0x79, 0x73, 0x74, 0x69, 0x6b, 0x6f, 0x3a,
    0x3a, 0x43, 0x6f, 0x72, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x4a, 0xa0, 0x18, 0x0a, 0x06, 0x12, 0x04,
    0x00, 0x00, 0x6a, 0x01, 0x0a, 0x08, 0x0a, 0x01, 0x0c, 0x12, 0x03, 0x00, 0x00, 0x12, 0x0a, 0x08,
    0x0a, 0x01, 0x02, 0x12, 0x03, 0x02, 0x00, 0x18, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x00, 0x12, 0x04,
    0x04, 0x00, 0x0c, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x00, 0x01, 0x12, 0x03, 0x04, 0x05, 0x0f,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x00, 0x12, 0x03, 0x05, 0x02, 0x1e, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x05, 0x02, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x05, 0x1c, 0x1d, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02,
    0x01, 0x12, 0x03, 0x06, 0x02, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x01, 0x12,
    0x03, 0x06, 0x02, 0x12, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x06,
    0x1c, 0x1d, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x02, 0x12, 0x03, 0x07, 0x02, 0x1e, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x07, 0x02, 0x12, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03, 0x07, 0x1c, 0x1d, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x00, 0x02, 0x03, 0x12, 0x03, 0x08, 0x02, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x03,
    0x01, 0x12, 0x03, 0x08, 0x02, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x03, 0x02, 0x12,
    0x03, 0x08, 0x1c, 0x1d, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x04, 0x12, 0x03, 0x09, 0x02,
    0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x09, 0x02, 0x13, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x04, 0x02, 0x12, 0x03, 0x09, 0x1c, 0x1d, 0x0a, 0x0b, 0x0a,
    0x04, 0x05, 0x00, 0x02, 0x05, 0x12, 0x03, 0x0a, 0x02, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00,
    0x02, 0x05, 0x01, 0x12, 0x03, 0x0a, 0x02, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x05,
    0x02, 0x12, 0x03, 0x0a, 0x1c, 0x1d, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x06, 0x12, 0x03,
    0x0b, 0x02, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x06, 0x01, 0x12, 0x03, 0x0b, 0x02,
    0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x06, 0x02, 0x12, 0x03, 0x0b, 0x1c, 0x1d, 0x0a,
    0x0a, 0x0a, 0x02, 0x05, 0x01, 0x12, 0x04, 0x0e, 0x00, 0x12, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05,
    0x01, 0x01, 0x12, 0x03, 0x0e, 0x05, 0x11, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x00, 0x12,
    0x03, 0x0f, 0x02, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x0f,
    0x02, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x00, 0x02, 0x12, 0x03, 0x0f, 0x1e, 0x1f,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x01, 0x12, 0x03, 0x10, 0x02, 0x20, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x10, 0x02, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x01, 0x02, 0x01, 0x02, 0x12, 0x03, 0x10, 0x1e, 0x1f, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02,
    0x02, 0x12, 0x03, 0x11, 0x02, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x02, 0x01, 0x12,
    0x03, 0x11, 0x02, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x02, 0x02, 0x12, 0x03, 0x11,
    0x1e, 0x1f, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x02, 0x12, 0x04, 0x14, 0x00, 0x18, 0x01, 0x0a, 0x0a,
    0x0a, 0x03, 0x05, 0x02, 0x01, 0x12, 0x03, 0x14, 0x05, 0x0e, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02,
    0x02, 0x00, 0x12, 0x03, 0x15, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x00, 0x01,
    0x12, 0x03, 0x15, 0x02, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x00, 0x02, 0x12, 0x03,
    0x15, 0x1b, 0x1c, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x01, 0x12, 0x03, 0x16, 0x02, 0x1d,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x01, 0x01, 0x12, 0x03, 0x16, 0x02, 0x12, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x02, 0x02, 0x01, 0x02, 0x12, 0x03, 0x16, 0x1b, 0x1c, 0x0a, 0x0b, 0x0a, 0x04,
    0x05, 0x02, 0x02, 0x02, 0x12, 0x03, 0x17, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02,
    0x02, 0x01, 0x12, 0x03, 0x17, 0x02, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x02, 0x02,
    0x12, 0x03, 0x17, 0x1b, 0x1c, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x03, 0x12, 0x04, 0x1a, 0x00, 0x27,
    0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x03, 0x01, 0x12, 0x03, 0x1a, 0x05, 0x10, 0x0a, 0x0b, 0x0a,
    0x04, 0x05, 0x03, 0x02, 0x00, 0x12, 0x03, 0x1b, 0x02, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03,
    0x02, 0x00, 0x01, 0x12, 0x03, 0x1b, 0x02, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x00,
    0x02, 0x12, 0x03, 0x1b, 0x20, 0x21, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x01, 0x12, 0x03,
    0x1c, 0x02, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x01, 0x01, 0x12, 0x03, 0x1c, 0x02,
    0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x01, 0x02, 0x12, 0x03, 0x1c, 0x20, 0x21, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x02, 0x12, 0x03, 0x1d, 0x02, 0x22, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x03, 0x02, 0x02, 0x01, 0x12, 0x03, 0x1d, 0x02, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03,
    0x02, 0x02, 0x02, 0x12, 0x03, 0x1d, 0x20, 0x21, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x03,
    0x12, 0x03, 0x1e, 0x02, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x03, 0x01, 0x12, 0x03,
    0x1e, 0x02, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x03, 0x02, 0x12, 0x03, 0x1e, 0x20,
    0x21, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x04, 0x12, 0x03, 0x1f, 0x02, 0x22, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x03, 0x02, 0x04, 0x01, 0x12, 0x03, 0x1f, 0x02, 0x17, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x03, 0x02, 0x04, 0x02, 0x12, 0x03, 0x1f, 0x20, 0x21, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03,
    0x02, 0x05, 0x12, 0x03, 0x20, 0x02, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x05, 0x01,
    0x12, 0x03, 0x20, 0x02, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x05, 0x02, 0x12, 0x03,
    0x20, 0x20, 0x21, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x06, 0x12, 0x03, 0x21, 0x02, 0x22,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x06, 0x01, 0x12, 0x03, 0x21, 0x02, 0x1d, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x03, 0x02, 0x06, 0x02, 0x12, 0x03, 0x21, 0x20, 0x21, 0x0a, 0x0b, 0x0a, 0x04,
    0x05, 0x03, 0x02, 0x07, 0x12, 0x03, 0x22, 0x02, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02,
    0x07, 0x01, 0x12, 0x03, 0x22, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x07, 0x02,
    0x12, 0x03, 0x22, 0x20, 0x21, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x08, 0x12, 0x03, 0x23,
    0x02, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x08, 0x01, 0x12, 0x03, 0x23, 0x02, 0x1d,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x08, 0x02, 0x12, 0x03, 0x23, 0x20, 0x21, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x03, 0x02, 0x09, 0x12, 0x03, 0x24, 0x02, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x03, 0x02, 0x09, 0x01, 0x12, 0x03, 0x24, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02,
    0x09, 0x02, 0x12, 0x03, 0x24, 0x20, 0x21, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x0a, 0x12,
    0x03, 0x25, 0x02, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x0a, 0x01, 0x12, 0x03, 0x25,
    0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x0a, 0x02, 0x12, 0x03, 0x25, 0x20, 0x22,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x0b, 0x12, 0x03, 0x26, 0x02, 0x23, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x03, 0x02, 0x0b, 0x01, 0x12, 0x03, 0x26, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x03, 0x02, 0x0b, 0x02, 0x12, 0x03, 0x26, 0x20, 0x22, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x04, 0x12,
    0x04, 0x29, 0x00, 0x2d, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x04, 0x01, 0x12, 0x03, 0x29, 0x05,
    0x11, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x00, 0x12, 0x03, 0x2a, 0x02, 0x20, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x04, 0x02, 0x00, 0x01, 0x12, 0x03, 0x2a, 0x02, 0x1b, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x04, 0x02, 0x00, 0x02, 0x12, 0x03, 0x2a, 0x1e, 0x1f, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04,
    0x02, 0x01, 0x12, 0x03, 0x2b, 0x02, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x01, 0x01,
    0x12, 0x03, 0x2b, 0x02, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x01, 0x02, 0x12, 0x03,
    0x2b, 0x1e, 0x1f, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x02, 0x12, 0x03, 0x2c, 0x02, 0x20,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x02, 0x01, 0x12, 0x03, 0x2c, 0x02, 0x16, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x04, 0x02, 0x02, 0x02, 0x12, 0x03, 0x2c, 0x1e, 0x1f, 0x0a, 0x0a, 0x0a, 0x02,
    0x05, 0x05, 0x12, 0x04, 0x2f, 0x00, 0x34, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x05, 0x01, 0x12,
    0x03, 0x2f, 0x05, 0x12, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x00, 0x12, 0x03, 0x30, 0x02,
    0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x00, 0x01, 0x12, 0x03, 0x30, 0x02, 0x1c, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x00, 0x02, 0x12, 0x03, 0x30, 0x1f, 0x20, 0x0a, 0x0b, 0x0a,
    0x04, 0x05, 0x05, 0x02, 0x01, 0x12, 0x03, 0x31, 0x02, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05,
    0x02, 0x01, 0x01, 0x12, 0x03, 0x31, 0x02, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x01,
    0x02, 0x12, 0x03, 0x31, 0x1f, 0x20, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x02, 0x12, 0x03,
    0x32, 0x02, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x02, 0x01, 0x12, 0x03, 0x32, 0x02,
    0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x02, 0x02, 0x12, 0x03, 0x32, 0x1f, 0x20, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x03, 0x12, 0x03, 0x33, 0x02, 0x21, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x05, 0x02, 0x03, 0x01, 0x12, 0x03, 0x33, 0x02, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05,
    0x02, 0x03, 0x02, 0x12, 0x03, 0x33, 0x1f, 0x20, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x06, 0x12, 0x04,
    0x37, 0x00, 0x41, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x06, 0x01, 0x12, 0x03, 0x37, 0x05, 0x12,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x06, 0x02, 0x00, 0x12, 0x03, 0x38, 0x02, 0x25, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x06, 0x02, 0x00, 0x01, 0x12, 0x03, 0x38, 0x02, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x06, 0x02, 0x00, 0x02, 0x12, 0x03, 0x38, 0x23, 0x24, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x06, 0x02,
    0x01, 0x12, 0x03, 0x39, 0x02, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x01, 0x01, 0x12,
    0x03, 0x39, 0x02, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x01, 0x02, 0x12, 0x03, 0x39,
    0x23, 0x24, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x06, 0x02, 0x02, 0x12, 0x03, 0x3a, 0x02, 0x25, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x02, 0x01, 0x12, 0x03, 0x3a, 0x02, 0x20, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x06, 0x02, 0x02, 0x02, 0x12, 0x03, 0x3a, 0x23, 0x24, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x06, 0x02, 0x03, 0x12, 0x03, 0x3b, 0x02, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x03,
    0x01, 0x12, 0x03, 0x3b, 0x02, 0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x03, 0x02, 0x12,
    0x03, 0x3b, 0x23, 0x24, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x06, 0x02, 0x04, 0x12, 0x03, 0x3c, 0x02,
    0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x04, 0x01, 0x12, 0x03, 0x3c, 0x02, 0x1c, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x04, 0x02, 0x12, 0x03, 0x3c, 0x23, 0x24, 0x0a, 0x0b, 0x0a,
    0x04, 0x05, 0x06, 0x02, 0x05, 0x12, 0x03, 0x3d, 0x02, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x06,
    0x02, 0x05, 0x01, 0x12, 0x03, 0x3d, 0x02, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x05,
    0x02, 0x12, 0x03, 0x3d, 0x23, 0x24, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x06, 0x02, 0x06, 0x12, 0x03,
    0x3e, 0x02, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x06, 0x01, 0x12, 0x03, 0x3e, 0x02,
    0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x06, 0x02, 0x12, 0x03, 0x3e, 0x23, 0x24, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x06, 0x02, 0x07, 0x12, 0x03, 0x3f, 0x02, 0x25, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x06, 0x02, 0x07, 0x01, 0x12, 0x03, 0x3f, 0x02, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x06,
    0x02, 0x07, 0x02, 0x12, 0x03, 0x3f, 0x23, 0x24, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x06, 0x02, 0x08,
    0x12, 0x03, 0x40, 0x02, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x08, 0x01, 0x12, 0x03,
    0x40, 0x02, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x06, 0x02, 0x08, 0x02, 0x12, 0x03, 0x40, 0x23,
    0x24, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x07, 0x12, 0x04, 0x43, 0x00, 0x4b, 0x01, 0x0a, 0x0a, 0x0a,
    0x03, 0x05, 0x07, 0x01, 0x12, 0x03, 0x43, 0x05, 0x16, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x07, 0x02,
    0x00, 0x12, 0x03, 0x44, 0x02, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x07, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x44, 0x02, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x07, 0x02, 0x00, 0x02, 0x12, 0x03, 0x44,
    0x28, 0x29, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x07, 0x02, 0x01, 0x12, 0x03, 0x45, 0x02, 0x2a, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x07, 0x02, 0x01, 0x01, 0x12, 0x03, 0x45, 0x02, 0x19, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x07, 0x02, 0x01, 0x02, 0x12, 0x03, 0x45, 0x28, 0x29, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x07, 0x02, 0x02, 0x12, 0x03, 0x46, 0x02, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x07, 0x02, 0x02,
    0x01, 0x12, 0x03, 0x46, 0x02, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x07, 0x02, 0x02, 0x02, 0x12,
    0x03, 0x46, 0x28, 0x29, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x07, 0x02, 0x03, 0x12, 0x03, 0x47, 0x02,
    0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x07, 0x02, 0x03, 0x01, 0x12, 0x03, 0x47, 0x02, 0x24, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x07, 0x02, 0x03, 0x02, 0x12, 0x03, 0x47, 0x28, 0x29, 0x0a, 0x0b, 0x0a,
    0x04, 0x05, 0x07, 0x02, 0x04, 0x12, 0x03, 0x48, 0x02, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x07,
    0x02, 0x04, 0x01, 0x12, 0x03, 0x48, 0x02, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x07, 0x02, 0x04,
    0x02, 0x12, 0x03, 0x48, 0x28, 0x29, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x07, 0x02, 0x05, 0x12, 0x03,
    0x49, 0x02, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x07, 0x02, 0x05, 0x01, 0x12, 0x03, 0x49, 0x02,
    0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x07, 0x02, 0x05, 0x02, 0x12, 0x03, 0x49, 0x28, 0x29, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x07, 0x02, 0x06, 0x12, 0x03, 0x4a, 0x02, 0x2a, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x07, 0x02, 0x06, 0x01, 0x12, 0x03, 0x4a, 0x02, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x07,
    0x02, 0x06, 0x02, 0x12, 0x03, 0x4a, 0x28, 0x29, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x08, 0x12, 0x04,
    0x4d, 0x00, 0x51, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x08, 0x01, 0x12, 0x03, 0x4d, 0x05, 0x14,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x08, 0x02, 0x00, 0x12, 0x03, 0x4e, 0x02, 0x23, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x08, 0x02, 0x00, 0x01, 0x12, 0x03, 0x4e, 0x02, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x08, 0x02, 0x00, 0x02, 0x12, 0x03, 0x4e, 0x21, 0x22, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x08, 0x02,
    0x01, 0x12, 0x03, 0x4f, 0x02, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x08, 0x02, 0x01, 0x01, 0x12,
    0x03, 0x4f, 0x02, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x08, 0x02, 0x01, 0x02, 0x12, 0x03, 0x4f,
    0x21, 0x22, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x08, 0x02, 0x02, 0x12, 0x03, 0x50, 0x02, 0x23, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x08, 0x02, 0x02, 0x01, 0x12, 0x03, 0x50, 0x02, 0x1b, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x08, 0x02, 0x02, 0x02, 0x12, 0x03, 0x50, 0x21, 0x22, 0x0a, 0x0a, 0x0a, 0x02, 0x05,
    0x09, 0x12, 0x04, 0x53, 0x00, 0x57, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x09, 0x01, 0x12, 0x03,
    0x53, 0x05, 0x10, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x09, 0x02, 0x00, 0x12, 0x03, 0x54, 0x02, 0x1f,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x09, 0x02, 0x00, 0x01, 0x12, 0x03, 0x54, 0x02, 0x1a, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x09, 0x02, 0x00, 0x02, 0x12, 0x03, 0x54, 0x1d, 0x1e, 0x0a, 0x0b, 0x0a, 0x04,
    0x05, 0x09, 0x02, 0x01, 0x12, 0x03, 0x55, 0x02, 0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x09, 0x02,
    0x01, 0x01, 0x12, 0x03, 0x55, 0x02, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x09, 0x02, 0x01, 0x02,
    0x12, 0x03, 0x55, 0x1d, 0x1e, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x09, 0x02, 0x02, 0x12, 0x03, 0x56,
    0x02, 0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x09, 0x02, 0x02, 0x01, 0x12, 0x03, 0x56, 0x02, 0x16,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x09, 0x02, 0x02, 0x02, 0x12, 0x03, 0x56, 0x1d, 0x1e, 0x0a, 0x0a,
    0x0a, 0x02, 0x05, 0x0a, 0x12, 0x04, 0x59, 0x00, 0x5c, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x0a,
    0x01, 0x12, 0x03, 0x59, 0x05, 0x13, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x0a, 0x02, 0x00, 0x12, 0x03,
    0x5a, 0x02, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x0a, 0x02, 0x00, 0x01, 0x12, 0x03, 0x5a, 0x02,
    0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x0a, 0x02, 0x00, 0x02, 0x12, 0x03, 0x5a, 0x20, 0x21, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x0a, 0x02, 0x01, 0x12, 0x03, 0x5b, 0x02, 0x22, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x0a, 0x02, 0x01, 0x01, 0x12, 0x03, 0x5b, 0x02, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x0a,
    0x02, 0x01, 0x02, 0x12, 0x03, 0x5b, 0x20, 0x21, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x0b, 0x12, 0x04,
    0x5e, 0x00, 0x61, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x0b, 0x01, 0x12, 0x03, 0x5e, 0x05, 0x16,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x0b, 0x02, 0x00, 0x12, 0x03, 0x5f, 0x02, 0x25, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x0b, 0x02, 0x00, 0x01, 0x12, 0x03, 0x5f, 0x02, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x0b, 0x02, 0x00, 0x02, 0x12, 0x03, 0x5f, 0x23, 0x24, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x0b, 0x02,
    0x01, 0x12, 0x03, 0x60, 0x02, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x0b, 0x02, 0x01, 0x01, 0x12,
    0x03, 0x60, 0x02, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x0b, 0x02, 0x01, 0x02, 0x12, 0x03, 0x60,
    0x1c, 0x1d, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x63, 0x00, 0x6a, 0x01, 0x0a, 0x0a,
    0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x63, 0x08, 0x16, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00,
    0x02, 0x00, 0x12, 0x03, 0x64, 0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x05,
    0x12, 0x03, 0x64, 0x02, 0x06, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03,
    0x64, 0x0b, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x64, 0x2b,
    0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x65, 0x02, 0x2d, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x05, 0x12, 0x03, 0x65, 0x02, 0x06, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x65, 0x0b, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x01, 0x03, 0x12, 0x03, 0x65, 0x2b, 0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x02,
    0x12, 0x03, 0x66, 0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x04, 0x12, 0x03,
    0x66, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x05, 0x12, 0x03, 0x66, 0x0b,
    0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x66, 0x12, 0x19, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x66, 0x2b, 0x2c, 0x0a, 0x0b, 0x0a,
    0x04, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03, 0x67, 0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x03, 0x04, 0x12, 0x03, 0x67, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03,
    0x05, 0x12, 0x03, 0x67, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12,
    0x03, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x03, 0x12, 0x03, 0x67,
    0x2b, 0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x04, 0x12, 0x03, 0x68, 0x02, 0x2d, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x04, 0x12, 0x03, 0x68, 0x02, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x04, 0x05, 0x12, 0x03, 0x68, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x68, 0x12, 0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x04, 0x03, 0x12, 0x03, 0x68, 0x2b, 0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x05, 0x12,
    0x03, 0x69, 0x02, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x04, 0x12, 0x03, 0x69,
    0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x05, 0x12, 0x03, 0x69, 0x0b, 0x11,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x69, 0x12, 0x25, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x03, 0x12, 0x03, 0x69, 0x2b, 0x2c, 0x62, 0x06, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x33,
];
include!("mystiko.core.v1.serde.rs");
// @@protoc_insertion_point(module)