pub use mystiko_t_bridge_proxy::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod mystiko_t_bridge_proxy {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CallCrossChainSyncTxError\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyOperator\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyRegister\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"OnlyWhitelistedExecutor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"WithdrawFailed\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toContract\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"fromContract\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TBridgeCrossChainMessage\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addExecutorWhitelist\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_register\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addRegisterWhitelist\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"changeOperator\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_fromChainId\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_fromContract\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_toContract\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"crossChainSyncTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"removeExecutorWhitelist\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_register\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"removeRegisterWhitelist\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toContract\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint64\",\"name\":\"_toChainId\",\"type\":\"uint64\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"sendMessage\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"withdraw\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static MYSTIKOTBRIDGEPROXY_ABI: ::ethers_contract::Lazy<
        ::ethers_core::abi::Abi,
    > = ::ethers_contract::Lazy::new(|| {
        ::ethers_core::utils::__serde_json::from_str(__ABI)
            .expect("ABI is always valid")
    });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        51,
        23,
        144,
        85,
        97,
        8,
        56,
        128,
        97,
        0,
        50,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        123,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        191,
        223,
        213,
        99,
        17,
        97,
        0,
        78,
        87,
        128,
        99,
        191,
        223,
        213,
        99,
        20,
        97,
        1,
        9,
        87,
        128,
        99,
        200,
        23,
        57,
        205,
        20,
        97,
        1,
        41,
        87,
        128,
        99,
        209,
        82,
        9,
        72,
        20,
        97,
        1,
        60,
        87,
        128,
        99,
        249,
        25,
        212,
        105,
        20,
        97,
        1,
        92,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        6,
        57,
        76,
        155,
        20,
        97,
        0,
        128,
        87,
        128,
        99,
        81,
        207,
        248,
        217,
        20,
        97,
        0,
        162,
        87,
        128,
        99,
        145,
        156,
        29,
        245,
        20,
        97,
        0,
        181,
        87,
        128,
        99,
        160,
        113,
        233,
        177,
        20,
        97,
        0,
        233,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        52,
        128,
        21,
        97,
        0,
        140,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        160,
        97,
        0,
        155,
        54,
        96,
        4,
        97,
        5,
        66,
        86,
        91,
        97,
        1,
        124,
        86,
        91,
        0,
        91,
        97,
        0,
        160,
        97,
        0,
        176,
        54,
        96,
        4,
        97,
        5,
        66,
        86,
        91,
        97,
        1,
        225,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        193,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        213,
        97,
        0,
        208,
        54,
        96,
        4,
        97,
        6,
        88,
        86,
        91,
        97,
        2,
        132,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        52,
        128,
        21,
        97,
        0,
        245,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        160,
        97,
        1,
        4,
        54,
        96,
        4,
        97,
        5,
        66,
        86,
        91,
        97,
        3,
        99,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        21,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        160,
        97,
        1,
        36,
        54,
        96,
        4,
        97,
        5,
        66,
        86,
        91,
        97,
        3,
        181,
        86,
        91,
        97,
        0,
        160,
        97,
        1,
        55,
        54,
        96,
        4,
        97,
        5,
        100,
        86,
        91,
        97,
        4,
        4,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        72,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        160,
        97,
        1,
        87,
        54,
        96,
        4,
        97,
        5,
        66,
        86,
        91,
        97,
        4,
        118,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        104,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        160,
        97,
        1,
        119,
        54,
        96,
        4,
        97,
        5,
        66,
        86,
        91,
        97,
        4,
        194,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        1,
        167,
        87,
        96,
        64,
        81,
        99,
        39,
        225,
        241,
        229,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        128,
        84,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        144,
        146,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        2,
        12,
        87,
        96,
        64,
        81,
        99,
        39,
        225,
        241,
        229,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        71,
        96,
        64,
        81,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        135,
        90,
        241,
        146,
        80,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        2,
        89,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        2,
        94,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        80,
        144,
        80,
        128,
        97,
        2,
        128,
        87,
        96,
        64,
        81,
        99,
        29,
        66,
        200,
        103,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        80,
        86,
        91,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        96,
        255,
        22,
        97,
        2,
        179,
        87,
        96,
        64,
        81,
        98,
        17,
        30,
        153,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        81,
        99,
        16,
        90,
        67,
        155,
        96,
        227,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        144,
        99,
        130,
        210,
        28,
        216,
        144,
        97,
        2,
        231,
        144,
        138,
        144,
        138,
        144,
        136,
        144,
        136,
        144,
        139,
        144,
        96,
        4,
        1,
        97,
        7,
        143,
        86,
        91,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        128,
        59,
        21,
        128,
        21,
        97,
        3,
        1,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        90,
        241,
        21,
        128,
        21,
        97,
        3,
        21,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        3,
        57,
        145,
        144,
        97,
        6,
        54,
        86,
        91,
        97,
        3,
        86,
        87,
        96,
        64,
        81,
        99,
        94,
        185,
        135,
        3,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        96,
        1,
        150,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        3,
        142,
        87,
        96,
        64,
        81,
        99,
        39,
        225,
        241,
        229,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        129,
        144,
        82,
        96,
        64,
        144,
        145,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        3,
        224,
        87,
        96,
        64,
        81,
        99,
        39,
        225,
        241,
        229,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        96,
        1,
        23,
        144,
        85,
        86,
        91,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        97,
        4,
        52,
        87,
        96,
        64,
        81,
        99,
        45,
        120,
        88,
        225,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        127,
        216,
        8,
        87,
        161,
        131,
        178,
        9,
        47,
        158,
        138,
        196,
        49,
        183,
        103,
        125,
        163,
        131,
        218,
        183,
        0,
        44,
        22,
        127,
        216,
        46,
        107,
        49,
        114,
        171,
        134,
        232,
        216,
        131,
        131,
        51,
        132,
        96,
        64,
        81,
        97,
        4,
        105,
        148,
        147,
        146,
        145,
        144,
        97,
        7,
        12,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        4,
        161,
        87,
        96,
        64,
        81,
        99,
        39,
        225,
        241,
        229,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        85,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        4,
        237,
        87,
        96,
        64,
        81,
        99,
        39,
        225,
        241,
        229,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        85,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        5,
        37,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        128,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        22,
        129,
        20,
        97,
        5,
        37,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        84,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        5,
        93,
        130,
        97,
        5,
        14,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        96,
        132,
        134,
        3,
        18,
        21,
        97,
        5,
        121,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        5,
        130,
        132,
        97,
        5,
        14,
        86,
        91,
        146,
        80,
        97,
        5,
        144,
        96,
        32,
        133,
        1,
        97,
        5,
        42,
        86,
        91,
        145,
        80,
        96,
        64,
        132,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        5,
        173,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        134,
        1,
        145,
        80,
        134,
        96,
        31,
        131,
        1,
        18,
        97,
        5,
        193,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        5,
        211,
        87,
        97,
        5,
        211,
        97,
        7,
        236,
        86,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        144,
        129,
        22,
        96,
        63,
        1,
        22,
        129,
        1,
        144,
        131,
        130,
        17,
        129,
        131,
        16,
        23,
        21,
        97,
        5,
        251,
        87,
        97,
        5,
        251,
        97,
        7,
        236,
        86,
        91,
        129,
        96,
        64,
        82,
        130,
        129,
        82,
        137,
        96,
        32,
        132,
        135,
        1,
        1,
        17,
        21,
        97,
        6,
        20,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        96,
        32,
        134,
        1,
        96,
        32,
        131,
        1,
        55,
        96,
        0,
        96,
        32,
        132,
        131,
        1,
        1,
        82,
        128,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        146,
        80,
        146,
        80,
        146,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        6,
        72,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        128,
        21,
        21,
        129,
        20,
        97,
        5,
        93,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        160,
        135,
        137,
        3,
        18,
        21,
        97,
        6,
        113,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        6,
        122,
        135,
        97,
        5,
        42,
        86,
        91,
        149,
        80,
        97,
        6,
        136,
        96,
        32,
        136,
        1,
        97,
        5,
        14,
        86,
        91,
        148,
        80,
        97,
        6,
        150,
        96,
        64,
        136,
        1,
        97,
        5,
        14,
        86,
        91,
        147,
        80,
        97,
        6,
        164,
        96,
        96,
        136,
        1,
        97,
        5,
        14,
        86,
        91,
        146,
        80,
        96,
        128,
        135,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        6,
        193,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        137,
        1,
        145,
        80,
        137,
        96,
        31,
        131,
        1,
        18,
        97,
        6,
        213,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        6,
        228,
        87,
        96,
        0,
        128,
        253,
        91,
        138,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        6,
        246,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        148,
        80,
        128,
        147,
        80,
        80,
        80,
        80,
        146,
        149,
        80,
        146,
        149,
        80,
        146,
        149,
        86,
        91,
        96,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        128,
        135,
        22,
        131,
        82,
        96,
        32,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        135,
        22,
        129,
        133,
        1,
        82,
        129,
        134,
        22,
        96,
        64,
        133,
        1,
        82,
        96,
        128,
        96,
        96,
        133,
        1,
        82,
        132,
        81,
        145,
        80,
        129,
        96,
        128,
        133,
        1,
        82,
        96,
        0,
        91,
        130,
        129,
        16,
        21,
        97,
        7,
        100,
        87,
        133,
        129,
        1,
        130,
        1,
        81,
        133,
        130,
        1,
        96,
        160,
        1,
        82,
        129,
        1,
        97,
        7,
        72,
        86,
        91,
        130,
        129,
        17,
        21,
        97,
        7,
        118,
        87,
        96,
        0,
        96,
        160,
        132,
        135,
        1,
        1,
        82,
        91,
        80,
        80,
        96,
        31,
        1,
        96,
        31,
        25,
        22,
        145,
        144,
        145,
        1,
        96,
        160,
        1,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        134,
        22,
        129,
        82,
        96,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        128,
        135,
        22,
        96,
        32,
        132,
        1,
        82,
        96,
        128,
        96,
        64,
        132,
        1,
        82,
        132,
        96,
        128,
        132,
        1,
        82,
        132,
        134,
        96,
        160,
        133,
        1,
        55,
        96,
        0,
        131,
        134,
        1,
        96,
        160,
        144,
        129,
        1,
        145,
        144,
        145,
        82,
        147,
        22,
        96,
        96,
        131,
        1,
        82,
        80,
        96,
        31,
        144,
        146,
        1,
        96,
        31,
        25,
        22,
        144,
        145,
        1,
        1,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        111,
        17,
        159,
        63,
        90,
        32,
        211,
        153,
        120,
        52,
        236,
        208,
        159,
        58,
        161,
        179,
        208,
        247,
        34,
        41,
        132,
        54,
        230,
        36,
        171,
        38,
        196,
        62,
        55,
        110,
        65,
        50,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        7,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static MYSTIKOTBRIDGEPROXY_BYTECODE: ::ethers_core::types::Bytes = ::ethers_core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        123,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        191,
        223,
        213,
        99,
        17,
        97,
        0,
        78,
        87,
        128,
        99,
        191,
        223,
        213,
        99,
        20,
        97,
        1,
        9,
        87,
        128,
        99,
        200,
        23,
        57,
        205,
        20,
        97,
        1,
        41,
        87,
        128,
        99,
        209,
        82,
        9,
        72,
        20,
        97,
        1,
        60,
        87,
        128,
        99,
        249,
        25,
        212,
        105,
        20,
        97,
        1,
        92,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        6,
        57,
        76,
        155,
        20,
        97,
        0,
        128,
        87,
        128,
        99,
        81,
        207,
        248,
        217,
        20,
        97,
        0,
        162,
        87,
        128,
        99,
        145,
        156,
        29,
        245,
        20,
        97,
        0,
        181,
        87,
        128,
        99,
        160,
        113,
        233,
        177,
        20,
        97,
        0,
        233,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        52,
        128,
        21,
        97,
        0,
        140,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        160,
        97,
        0,
        155,
        54,
        96,
        4,
        97,
        5,
        66,
        86,
        91,
        97,
        1,
        124,
        86,
        91,
        0,
        91,
        97,
        0,
        160,
        97,
        0,
        176,
        54,
        96,
        4,
        97,
        5,
        66,
        86,
        91,
        97,
        1,
        225,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        193,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        213,
        97,
        0,
        208,
        54,
        96,
        4,
        97,
        6,
        88,
        86,
        91,
        97,
        2,
        132,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        52,
        128,
        21,
        97,
        0,
        245,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        160,
        97,
        1,
        4,
        54,
        96,
        4,
        97,
        5,
        66,
        86,
        91,
        97,
        3,
        99,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        21,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        160,
        97,
        1,
        36,
        54,
        96,
        4,
        97,
        5,
        66,
        86,
        91,
        97,
        3,
        181,
        86,
        91,
        97,
        0,
        160,
        97,
        1,
        55,
        54,
        96,
        4,
        97,
        5,
        100,
        86,
        91,
        97,
        4,
        4,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        72,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        160,
        97,
        1,
        87,
        54,
        96,
        4,
        97,
        5,
        66,
        86,
        91,
        97,
        4,
        118,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        104,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        160,
        97,
        1,
        119,
        54,
        96,
        4,
        97,
        5,
        66,
        86,
        91,
        97,
        4,
        194,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        1,
        167,
        87,
        96,
        64,
        81,
        99,
        39,
        225,
        241,
        229,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        128,
        84,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        144,
        146,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        2,
        12,
        87,
        96,
        64,
        81,
        99,
        39,
        225,
        241,
        229,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        71,
        96,
        64,
        81,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        135,
        90,
        241,
        146,
        80,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        2,
        89,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        2,
        94,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        80,
        144,
        80,
        128,
        97,
        2,
        128,
        87,
        96,
        64,
        81,
        99,
        29,
        66,
        200,
        103,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        80,
        86,
        91,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        96,
        255,
        22,
        97,
        2,
        179,
        87,
        96,
        64,
        81,
        98,
        17,
        30,
        153,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        81,
        99,
        16,
        90,
        67,
        155,
        96,
        227,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        144,
        99,
        130,
        210,
        28,
        216,
        144,
        97,
        2,
        231,
        144,
        138,
        144,
        138,
        144,
        136,
        144,
        136,
        144,
        139,
        144,
        96,
        4,
        1,
        97,
        7,
        143,
        86,
        91,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        128,
        59,
        21,
        128,
        21,
        97,
        3,
        1,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        90,
        241,
        21,
        128,
        21,
        97,
        3,
        21,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        3,
        57,
        145,
        144,
        97,
        6,
        54,
        86,
        91,
        97,
        3,
        86,
        87,
        96,
        64,
        81,
        99,
        94,
        185,
        135,
        3,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        96,
        1,
        150,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        3,
        142,
        87,
        96,
        64,
        81,
        99,
        39,
        225,
        241,
        229,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        129,
        144,
        82,
        96,
        64,
        144,
        145,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        3,
        224,
        87,
        96,
        64,
        81,
        99,
        39,
        225,
        241,
        229,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        96,
        1,
        23,
        144,
        85,
        86,
        91,
        51,
        96,
        0,
        144,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        97,
        4,
        52,
        87,
        96,
        64,
        81,
        99,
        45,
        120,
        88,
        225,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        127,
        216,
        8,
        87,
        161,
        131,
        178,
        9,
        47,
        158,
        138,
        196,
        49,
        183,
        103,
        125,
        163,
        131,
        218,
        183,
        0,
        44,
        22,
        127,
        216,
        46,
        107,
        49,
        114,
        171,
        134,
        232,
        216,
        131,
        131,
        51,
        132,
        96,
        64,
        81,
        97,
        4,
        105,
        148,
        147,
        146,
        145,
        144,
        97,
        7,
        12,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        4,
        161,
        87,
        96,
        64,
        81,
        99,
        39,
        225,
        241,
        229,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        85,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        4,
        237,
        87,
        96,
        64,
        81,
        99,
        39,
        225,
        241,
        229,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        85,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        5,
        37,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        128,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        22,
        129,
        20,
        97,
        5,
        37,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        84,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        5,
        93,
        130,
        97,
        5,
        14,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        96,
        132,
        134,
        3,
        18,
        21,
        97,
        5,
        121,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        5,
        130,
        132,
        97,
        5,
        14,
        86,
        91,
        146,
        80,
        97,
        5,
        144,
        96,
        32,
        133,
        1,
        97,
        5,
        42,
        86,
        91,
        145,
        80,
        96,
        64,
        132,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        5,
        173,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        134,
        1,
        145,
        80,
        134,
        96,
        31,
        131,
        1,
        18,
        97,
        5,
        193,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        5,
        211,
        87,
        97,
        5,
        211,
        97,
        7,
        236,
        86,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        144,
        129,
        22,
        96,
        63,
        1,
        22,
        129,
        1,
        144,
        131,
        130,
        17,
        129,
        131,
        16,
        23,
        21,
        97,
        5,
        251,
        87,
        97,
        5,
        251,
        97,
        7,
        236,
        86,
        91,
        129,
        96,
        64,
        82,
        130,
        129,
        82,
        137,
        96,
        32,
        132,
        135,
        1,
        1,
        17,
        21,
        97,
        6,
        20,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        96,
        32,
        134,
        1,
        96,
        32,
        131,
        1,
        55,
        96,
        0,
        96,
        32,
        132,
        131,
        1,
        1,
        82,
        128,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        146,
        80,
        146,
        80,
        146,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        6,
        72,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        128,
        21,
        21,
        129,
        20,
        97,
        5,
        93,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        160,
        135,
        137,
        3,
        18,
        21,
        97,
        6,
        113,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        6,
        122,
        135,
        97,
        5,
        42,
        86,
        91,
        149,
        80,
        97,
        6,
        136,
        96,
        32,
        136,
        1,
        97,
        5,
        14,
        86,
        91,
        148,
        80,
        97,
        6,
        150,
        96,
        64,
        136,
        1,
        97,
        5,
        14,
        86,
        91,
        147,
        80,
        97,
        6,
        164,
        96,
        96,
        136,
        1,
        97,
        5,
        14,
        86,
        91,
        146,
        80,
        96,
        128,
        135,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        6,
        193,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        137,
        1,
        145,
        80,
        137,
        96,
        31,
        131,
        1,
        18,
        97,
        6,
        213,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        6,
        228,
        87,
        96,
        0,
        128,
        253,
        91,
        138,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        6,
        246,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        148,
        80,
        128,
        147,
        80,
        80,
        80,
        80,
        146,
        149,
        80,
        146,
        149,
        80,
        146,
        149,
        86,
        91,
        96,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        128,
        135,
        22,
        131,
        82,
        96,
        32,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        135,
        22,
        129,
        133,
        1,
        82,
        129,
        134,
        22,
        96,
        64,
        133,
        1,
        82,
        96,
        128,
        96,
        96,
        133,
        1,
        82,
        132,
        81,
        145,
        80,
        129,
        96,
        128,
        133,
        1,
        82,
        96,
        0,
        91,
        130,
        129,
        16,
        21,
        97,
        7,
        100,
        87,
        133,
        129,
        1,
        130,
        1,
        81,
        133,
        130,
        1,
        96,
        160,
        1,
        82,
        129,
        1,
        97,
        7,
        72,
        86,
        91,
        130,
        129,
        17,
        21,
        97,
        7,
        118,
        87,
        96,
        0,
        96,
        160,
        132,
        135,
        1,
        1,
        82,
        91,
        80,
        80,
        96,
        31,
        1,
        96,
        31,
        25,
        22,
        145,
        144,
        145,
        1,
        96,
        160,
        1,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        134,
        22,
        129,
        82,
        96,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        128,
        135,
        22,
        96,
        32,
        132,
        1,
        82,
        96,
        128,
        96,
        64,
        132,
        1,
        82,
        132,
        96,
        128,
        132,
        1,
        82,
        132,
        134,
        96,
        160,
        133,
        1,
        55,
        96,
        0,
        131,
        134,
        1,
        96,
        160,
        144,
        129,
        1,
        145,
        144,
        145,
        82,
        147,
        22,
        96,
        96,
        131,
        1,
        82,
        80,
        96,
        31,
        144,
        146,
        1,
        96,
        31,
        25,
        22,
        144,
        145,
        1,
        1,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        111,
        17,
        159,
        63,
        90,
        32,
        211,
        153,
        120,
        52,
        236,
        208,
        159,
        58,
        161,
        179,
        208,
        247,
        34,
        41,
        132,
        54,
        230,
        36,
        171,
        38,
        196,
        62,
        55,
        110,
        65,
        50,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        7,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static MYSTIKOTBRIDGEPROXY_DEPLOYED_BYTECODE: ::ethers_core::types::Bytes = ::ethers_core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct MystikoTBridgeProxy<M>(::ethers_contract::Contract<M>);
    impl<M> ::core::clone::Clone for MystikoTBridgeProxy<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for MystikoTBridgeProxy<M> {
        type Target = ::ethers_contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for MystikoTBridgeProxy<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for MystikoTBridgeProxy<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(MystikoTBridgeProxy))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers_providers::Middleware> MystikoTBridgeProxy<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers_core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers_contract::Contract::new(
                    address.into(),
                    MYSTIKOTBRIDGEPROXY_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers_core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers_contract::builders::ContractDeployer<M, Self>,
            ::ethers_contract::ContractError<M>,
        > {
            let factory = ::ethers_contract::ContractFactory::new(
                MYSTIKOTBRIDGEPROXY_ABI.clone(),
                MYSTIKOTBRIDGEPROXY_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers_contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `addExecutorWhitelist` (0xa071e9b1) function
        pub fn add_executor_whitelist(
            &self,
            executor: ::ethers_core::types::Address,
        ) -> ::ethers_contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([160, 113, 233, 177], executor)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `addRegisterWhitelist` (0xbfdfd563) function
        pub fn add_register_whitelist(
            &self,
            register: ::ethers_core::types::Address,
        ) -> ::ethers_contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([191, 223, 213, 99], register)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `changeOperator` (0x06394c9b) function
        pub fn change_operator(
            &self,
            new_operator: ::ethers_core::types::Address,
        ) -> ::ethers_contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([6, 57, 76, 155], new_operator)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `crossChainSyncTx` (0x919c1df5) function
        pub fn cross_chain_sync_tx(
            &self,
            from_chain_id: u64,
            from_contract: ::ethers_core::types::Address,
            to_contract: ::ethers_core::types::Address,
            executor: ::ethers_core::types::Address,
            message: ::ethers_core::types::Bytes,
        ) -> ::ethers_contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash(
                    [145, 156, 29, 245],
                    (from_chain_id, from_contract, to_contract, executor, message),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `removeExecutorWhitelist` (0xd1520948) function
        pub fn remove_executor_whitelist(
            &self,
            executor: ::ethers_core::types::Address,
        ) -> ::ethers_contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([209, 82, 9, 72], executor)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `removeRegisterWhitelist` (0xf919d469) function
        pub fn remove_register_whitelist(
            &self,
            register: ::ethers_core::types::Address,
        ) -> ::ethers_contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([249, 25, 212, 105], register)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `sendMessage` (0xc81739cd) function
        pub fn send_message(
            &self,
            to_contract: ::ethers_core::types::Address,
            to_chain_id: u64,
            message: ::ethers_core::types::Bytes,
        ) -> ::ethers_contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([200, 23, 57, 205], (to_contract, to_chain_id, message))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `withdraw` (0x51cff8d9) function
        pub fn withdraw(
            &self,
            recipient: ::ethers_core::types::Address,
        ) -> ::ethers_contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([81, 207, 248, 217], recipient)
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `TBridgeCrossChainMessage` event
        pub fn t_bridge_cross_chain_message_filter(
            &self,
        ) -> ::ethers_contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            TbridgeCrossChainMessageFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers_contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            TbridgeCrossChainMessageFilter,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers_providers::Middleware> From<::ethers_contract::Contract<M>>
    for MystikoTBridgeProxy<M> {
        fn from(contract: ::ethers_contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `CallCrossChainSyncTxError` with signature `CallCrossChainSyncTxError()` and selector `0xbd730e06`
    #[derive(
        Clone,
        ::ethers_contract::EthError,
        ::ethers_contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "CallCrossChainSyncTxError", abi = "CallCrossChainSyncTxError()")]
    pub struct CallCrossChainSyncTxError;
    ///Custom Error type `OnlyOperator` with signature `OnlyOperator()` and selector `0x27e1f1e5`
    #[derive(
        Clone,
        ::ethers_contract::EthError,
        ::ethers_contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "OnlyOperator", abi = "OnlyOperator()")]
    pub struct OnlyOperator;
    ///Custom Error type `OnlyRegister` with signature `OnlyRegister()` and selector `0x5af0b1c2`
    #[derive(
        Clone,
        ::ethers_contract::EthError,
        ::ethers_contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "OnlyRegister", abi = "OnlyRegister()")]
    pub struct OnlyRegister;
    ///Custom Error type `OnlyWhitelistedExecutor` with signature `OnlyWhitelistedExecutor()` and selector `0x00447a64`
    #[derive(
        Clone,
        ::ethers_contract::EthError,
        ::ethers_contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "OnlyWhitelistedExecutor", abi = "OnlyWhitelistedExecutor()")]
    pub struct OnlyWhitelistedExecutor;
    ///Custom Error type `WithdrawFailed` with signature `WithdrawFailed()` and selector `0x750b219c`
    #[derive(
        Clone,
        ::ethers_contract::EthError,
        ::ethers_contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "WithdrawFailed", abi = "WithdrawFailed()")]
    pub struct WithdrawFailed;
    ///Container type for all of the contract's custom errors
    #[derive(
        Clone,
        ::ethers_contract::EthAbiType,
        serde::Serialize,
        serde::Deserialize,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub enum MystikoTBridgeProxyErrors {
        CallCrossChainSyncTxError(CallCrossChainSyncTxError),
        OnlyOperator(OnlyOperator),
        OnlyRegister(OnlyRegister),
        OnlyWhitelistedExecutor(OnlyWhitelistedExecutor),
        WithdrawFailed(WithdrawFailed),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers_core::abi::AbiDecode for MystikoTBridgeProxyErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers_core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <::std::string::String as ::ethers_core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded)
                = <CallCrossChainSyncTxError as ::ethers_core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::CallCrossChainSyncTxError(decoded));
            }
            if let Ok(decoded)
                = <OnlyOperator as ::ethers_core::abi::AbiDecode>::decode(data) {
                return Ok(Self::OnlyOperator(decoded));
            }
            if let Ok(decoded)
                = <OnlyRegister as ::ethers_core::abi::AbiDecode>::decode(data) {
                return Ok(Self::OnlyRegister(decoded));
            }
            if let Ok(decoded)
                = <OnlyWhitelistedExecutor as ::ethers_core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::OnlyWhitelistedExecutor(decoded));
            }
            if let Ok(decoded)
                = <WithdrawFailed as ::ethers_core::abi::AbiDecode>::decode(data) {
                return Ok(Self::WithdrawFailed(decoded));
            }
            Err(::ethers_core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers_core::abi::AbiEncode for MystikoTBridgeProxyErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::CallCrossChainSyncTxError(element) => {
                    ::ethers_core::abi::AbiEncode::encode(element)
                }
                Self::OnlyOperator(element) => {
                    ::ethers_core::abi::AbiEncode::encode(element)
                }
                Self::OnlyRegister(element) => {
                    ::ethers_core::abi::AbiEncode::encode(element)
                }
                Self::OnlyWhitelistedExecutor(element) => {
                    ::ethers_core::abi::AbiEncode::encode(element)
                }
                Self::WithdrawFailed(element) => {
                    ::ethers_core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers_core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers_contract::ContractRevert for MystikoTBridgeProxyErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <CallCrossChainSyncTxError as ::ethers_contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <OnlyOperator as ::ethers_contract::EthError>::selector() => true,
                _ if selector
                    == <OnlyRegister as ::ethers_contract::EthError>::selector() => true,
                _ if selector
                    == <OnlyWhitelistedExecutor as ::ethers_contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <WithdrawFailed as ::ethers_contract::EthError>::selector() => {
                    true
                }
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for MystikoTBridgeProxyErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::CallCrossChainSyncTxError(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::OnlyOperator(element) => ::core::fmt::Display::fmt(element, f),
                Self::OnlyRegister(element) => ::core::fmt::Display::fmt(element, f),
                Self::OnlyWhitelistedExecutor(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::WithdrawFailed(element) => ::core::fmt::Display::fmt(element, f),
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for MystikoTBridgeProxyErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<CallCrossChainSyncTxError> for MystikoTBridgeProxyErrors {
        fn from(value: CallCrossChainSyncTxError) -> Self {
            Self::CallCrossChainSyncTxError(value)
        }
    }
    impl ::core::convert::From<OnlyOperator> for MystikoTBridgeProxyErrors {
        fn from(value: OnlyOperator) -> Self {
            Self::OnlyOperator(value)
        }
    }
    impl ::core::convert::From<OnlyRegister> for MystikoTBridgeProxyErrors {
        fn from(value: OnlyRegister) -> Self {
            Self::OnlyRegister(value)
        }
    }
    impl ::core::convert::From<OnlyWhitelistedExecutor> for MystikoTBridgeProxyErrors {
        fn from(value: OnlyWhitelistedExecutor) -> Self {
            Self::OnlyWhitelistedExecutor(value)
        }
    }
    impl ::core::convert::From<WithdrawFailed> for MystikoTBridgeProxyErrors {
        fn from(value: WithdrawFailed) -> Self {
            Self::WithdrawFailed(value)
        }
    }
    #[derive(
        Clone,
        ::ethers_contract::EthEvent,
        ::ethers_contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "TBridgeCrossChainMessage",
        abi = "TBridgeCrossChainMessage(address,uint256,address,bytes)"
    )]
    pub struct TbridgeCrossChainMessageFilter {
        pub to_contract: ::ethers_core::types::Address,
        pub to_chain_id: ::ethers_core::types::U256,
        pub from_contract: ::ethers_core::types::Address,
        pub message: ::ethers_core::types::Bytes,
    }
    ///Container type for all input parameters for the `addExecutorWhitelist` function with signature `addExecutorWhitelist(address)` and selector `0xa071e9b1`
    #[derive(
        Clone,
        ::ethers_contract::EthCall,
        ::ethers_contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "addExecutorWhitelist", abi = "addExecutorWhitelist(address)")]
    pub struct AddExecutorWhitelistCall {
        pub executor: ::ethers_core::types::Address,
    }
    ///Container type for all input parameters for the `addRegisterWhitelist` function with signature `addRegisterWhitelist(address)` and selector `0xbfdfd563`
    #[derive(
        Clone,
        ::ethers_contract::EthCall,
        ::ethers_contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "addRegisterWhitelist", abi = "addRegisterWhitelist(address)")]
    pub struct AddRegisterWhitelistCall {
        pub register: ::ethers_core::types::Address,
    }
    ///Container type for all input parameters for the `changeOperator` function with signature `changeOperator(address)` and selector `0x06394c9b`
    #[derive(
        Clone,
        ::ethers_contract::EthCall,
        ::ethers_contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "changeOperator", abi = "changeOperator(address)")]
    pub struct ChangeOperatorCall {
        pub new_operator: ::ethers_core::types::Address,
    }
    ///Container type for all input parameters for the `crossChainSyncTx` function with signature `crossChainSyncTx(uint64,address,address,address,bytes)` and selector `0x919c1df5`
    #[derive(
        Clone,
        ::ethers_contract::EthCall,
        ::ethers_contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "crossChainSyncTx",
        abi = "crossChainSyncTx(uint64,address,address,address,bytes)"
    )]
    pub struct CrossChainSyncTxCall {
        pub from_chain_id: u64,
        pub from_contract: ::ethers_core::types::Address,
        pub to_contract: ::ethers_core::types::Address,
        pub executor: ::ethers_core::types::Address,
        pub message: ::ethers_core::types::Bytes,
    }
    ///Container type for all input parameters for the `removeExecutorWhitelist` function with signature `removeExecutorWhitelist(address)` and selector `0xd1520948`
    #[derive(
        Clone,
        ::ethers_contract::EthCall,
        ::ethers_contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "removeExecutorWhitelist",
        abi = "removeExecutorWhitelist(address)"
    )]
    pub struct RemoveExecutorWhitelistCall {
        pub executor: ::ethers_core::types::Address,
    }
    ///Container type for all input parameters for the `removeRegisterWhitelist` function with signature `removeRegisterWhitelist(address)` and selector `0xf919d469`
    #[derive(
        Clone,
        ::ethers_contract::EthCall,
        ::ethers_contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "removeRegisterWhitelist",
        abi = "removeRegisterWhitelist(address)"
    )]
    pub struct RemoveRegisterWhitelistCall {
        pub register: ::ethers_core::types::Address,
    }
    ///Container type for all input parameters for the `sendMessage` function with signature `sendMessage(address,uint64,bytes)` and selector `0xc81739cd`
    #[derive(
        Clone,
        ::ethers_contract::EthCall,
        ::ethers_contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "sendMessage", abi = "sendMessage(address,uint64,bytes)")]
    pub struct SendMessageCall {
        pub to_contract: ::ethers_core::types::Address,
        pub to_chain_id: u64,
        pub message: ::ethers_core::types::Bytes,
    }
    ///Container type for all input parameters for the `withdraw` function with signature `withdraw(address)` and selector `0x51cff8d9`
    #[derive(
        Clone,
        ::ethers_contract::EthCall,
        ::ethers_contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "withdraw", abi = "withdraw(address)")]
    pub struct WithdrawCall {
        pub recipient: ::ethers_core::types::Address,
    }
    ///Container type for all of the contract's call
    #[derive(
        Clone,
        ::ethers_contract::EthAbiType,
        serde::Serialize,
        serde::Deserialize,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub enum MystikoTBridgeProxyCalls {
        AddExecutorWhitelist(AddExecutorWhitelistCall),
        AddRegisterWhitelist(AddRegisterWhitelistCall),
        ChangeOperator(ChangeOperatorCall),
        CrossChainSyncTx(CrossChainSyncTxCall),
        RemoveExecutorWhitelist(RemoveExecutorWhitelistCall),
        RemoveRegisterWhitelist(RemoveRegisterWhitelistCall),
        SendMessage(SendMessageCall),
        Withdraw(WithdrawCall),
    }
    impl ::ethers_core::abi::AbiDecode for MystikoTBridgeProxyCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers_core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <AddExecutorWhitelistCall as ::ethers_core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::AddExecutorWhitelist(decoded));
            }
            if let Ok(decoded)
                = <AddRegisterWhitelistCall as ::ethers_core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::AddRegisterWhitelist(decoded));
            }
            if let Ok(decoded)
                = <ChangeOperatorCall as ::ethers_core::abi::AbiDecode>::decode(data) {
                return Ok(Self::ChangeOperator(decoded));
            }
            if let Ok(decoded)
                = <CrossChainSyncTxCall as ::ethers_core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::CrossChainSyncTx(decoded));
            }
            if let Ok(decoded)
                = <RemoveExecutorWhitelistCall as ::ethers_core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RemoveExecutorWhitelist(decoded));
            }
            if let Ok(decoded)
                = <RemoveRegisterWhitelistCall as ::ethers_core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RemoveRegisterWhitelist(decoded));
            }
            if let Ok(decoded)
                = <SendMessageCall as ::ethers_core::abi::AbiDecode>::decode(data) {
                return Ok(Self::SendMessage(decoded));
            }
            if let Ok(decoded)
                = <WithdrawCall as ::ethers_core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Withdraw(decoded));
            }
            Err(::ethers_core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers_core::abi::AbiEncode for MystikoTBridgeProxyCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::AddExecutorWhitelist(element) => {
                    ::ethers_core::abi::AbiEncode::encode(element)
                }
                Self::AddRegisterWhitelist(element) => {
                    ::ethers_core::abi::AbiEncode::encode(element)
                }
                Self::ChangeOperator(element) => {
                    ::ethers_core::abi::AbiEncode::encode(element)
                }
                Self::CrossChainSyncTx(element) => {
                    ::ethers_core::abi::AbiEncode::encode(element)
                }
                Self::RemoveExecutorWhitelist(element) => {
                    ::ethers_core::abi::AbiEncode::encode(element)
                }
                Self::RemoveRegisterWhitelist(element) => {
                    ::ethers_core::abi::AbiEncode::encode(element)
                }
                Self::SendMessage(element) => {
                    ::ethers_core::abi::AbiEncode::encode(element)
                }
                Self::Withdraw(element) => {
                    ::ethers_core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for MystikoTBridgeProxyCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::AddExecutorWhitelist(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::AddRegisterWhitelist(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::ChangeOperator(element) => ::core::fmt::Display::fmt(element, f),
                Self::CrossChainSyncTx(element) => ::core::fmt::Display::fmt(element, f),
                Self::RemoveExecutorWhitelist(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RemoveRegisterWhitelist(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::SendMessage(element) => ::core::fmt::Display::fmt(element, f),
                Self::Withdraw(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<AddExecutorWhitelistCall> for MystikoTBridgeProxyCalls {
        fn from(value: AddExecutorWhitelistCall) -> Self {
            Self::AddExecutorWhitelist(value)
        }
    }
    impl ::core::convert::From<AddRegisterWhitelistCall> for MystikoTBridgeProxyCalls {
        fn from(value: AddRegisterWhitelistCall) -> Self {
            Self::AddRegisterWhitelist(value)
        }
    }
    impl ::core::convert::From<ChangeOperatorCall> for MystikoTBridgeProxyCalls {
        fn from(value: ChangeOperatorCall) -> Self {
            Self::ChangeOperator(value)
        }
    }
    impl ::core::convert::From<CrossChainSyncTxCall> for MystikoTBridgeProxyCalls {
        fn from(value: CrossChainSyncTxCall) -> Self {
            Self::CrossChainSyncTx(value)
        }
    }
    impl ::core::convert::From<RemoveExecutorWhitelistCall>
    for MystikoTBridgeProxyCalls {
        fn from(value: RemoveExecutorWhitelistCall) -> Self {
            Self::RemoveExecutorWhitelist(value)
        }
    }
    impl ::core::convert::From<RemoveRegisterWhitelistCall>
    for MystikoTBridgeProxyCalls {
        fn from(value: RemoveRegisterWhitelistCall) -> Self {
            Self::RemoveRegisterWhitelist(value)
        }
    }
    impl ::core::convert::From<SendMessageCall> for MystikoTBridgeProxyCalls {
        fn from(value: SendMessageCall) -> Self {
            Self::SendMessage(value)
        }
    }
    impl ::core::convert::From<WithdrawCall> for MystikoTBridgeProxyCalls {
        fn from(value: WithdrawCall) -> Self {
            Self::Withdraw(value)
        }
    }
    ///Container type for all return fields from the `crossChainSyncTx` function with signature `crossChainSyncTx(uint64,address,address,address,bytes)` and selector `0x919c1df5`
    #[derive(
        Clone,
        ::ethers_contract::EthAbiType,
        ::ethers_contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct CrossChainSyncTxReturn(pub bool);
}
